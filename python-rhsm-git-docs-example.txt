commit 31275e48ffe6c212c4edfafc43ead6207845cabb
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:48:09 2012 -0500

    python-rhsm-1.1.6-1

diff --git a/rhsm.bitstream b/rhsm.bitstream
new file mode 100644
index 0000000..426863e
--- /dev/null
+++ b/rhsm.bitstream
@@ -0,0 +1,75 @@
+MODULE NAME
+    rhsm.bitstream
+
+
+CLASSES
+
+    class GhettoBitStream(object)
+        Accepts binary data and makes it available as a stream of bits or
+        one byte at a time. Python does not provide a built-in way to read
+        a stream of bits, or a way to represent a single bit. Thus, this
+        class uses character '0' or '1' to represent the status of each
+        bit.
+
+        Data is converted into the '0' and '1' characters one byte at a
+        time, since that operation multiplies the size of the data by a
+        factor of 8, and it may not be desirable to inflate all of the data
+        at once.
+
+
+        __init__(self, data)
+            :param data:    binary data in a string :type  data:    str
+
+        __iter__(self)
+
+        next(self)
+            converts one byte at a time into a bit representation, waiting
+            until those bits have been consumed before converting another
+            byte
+
+            :return:    next bit in the stream, either '0' or '1' :rtype:
+            string
+
+        pop_byte(self)
+            :return:    next entire byte in the stream, as an int :rtype:
+            int
+
+        Class methods
+
+            _byte_to_bits(cls, byte)
+                Produces a string representation of a byte as a base-2
+                number. Python versions < 2.6 lack the "bin()" builtin as
+                well as the below "format()" method of strings, so this
+                method falls back to using a home-brew implementation.
+
+                :param byte:    positive int < 256 :type  byte:    int
+                :return:        binary representation of byte as 8-char
+                string :rtype:         str
+
+        Static methods
+
+            _bin_backport(x)
+                In python versions < 2.6, there is no built-in way to
+                produce a string representation of base-2 data. Thus, we
+                have to do it manually.
+
+                :param byte:    positive int < 256 :type  byte:    int
+                :return:        binary representation of byte as 8-char
+                string :rtype:         str
+
+            combine_bytes(data)
+
+                combine unsigned ints read from a bit stream into one unsigned number,
+                reading data as big-endian
+
+                :param data:    iterable of positive ints, each representing a byte of
+                                uint binary data that should be combined
+                                such that the right-most byte stays as-is, and then
+                                each byte to the left gets left-shifted by 8 * n bits.
+                                For example, [1, 2] would give you 258 ((1 << 8) + 2)
+                :type  data:    iterable of positive ints
+                :return:        positive int, composed from input bytes combined as
+                                one int
+                :rtype:         int
+
+        Inherited methods
diff --git a/rhsm.certificate2 b/rhsm.certificate2
index 163864d..9fe503d 100644
--- a/rhsm.certificate2
+++ b/rhsm.certificate2
@@ -180,13 +180,60 @@ CLASSES
     class EntitlementCertificate(ProductCertificate)


-        __init__(self, order=None, content=None, **kwargs)
+        __init__(self, order=None, content=None, extensions=None, **kwargs)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

+        _path_tree(self)
+            :return:    PathTree object built from this cert's extensions
+            :rtype:     rhsm.pathtree.PathTree
+
+            :raise: AttributeError if self.version.major < 3
+
+        check_path(self, path)
+            Checks the given path against the list of entitled paths as
+            encoded in extensions. See PathTree for more detailed docs.
+
+            :param path:    path to which access is being requested :type
+            path:    basestring
+
+            :return:    True iff the path matches, else False :rtype:
+            bool
+
+            :raise:    ValueError when self.version.major < 3
+
+        _check_v1_path(self, path)
+            Check the requested path against a v1 certificate
+
+            :param path:    requested path :type  path:    basestring
+            :return:    True iff the path matches, else False :rtype:
+            bool
+
         delete(self)
             Override parent to also delete certificate key.

+        Static methods
+
+            _validate_v1_url(oid_url, dest)
+
+                Determines if the destination URL matches the OID's URL.
+
+                Swaps out all $ variables (e.g. $basearch, $version) for a reg ex
+                wildcard in that location. For example, the following entitlement:
+                  content/dist/rhel/server/$version/$basearch/os
+
+                Should allow any value for the variables:
+                  content/dist/rhel/server/.+?/.+?/os
+
+                :param oid_url: path associated with an entitlement OID, as pulled from
+                                the cert's extensions.
+                :type  oid_url: basestring
+                :param dest:    path requested by a client
+                :type  dest:    basestring
+
+                :return: True iff the OID permits the destination else False
+                :rtype:  bool
+
         Inherited methods
             rhsm.certificate2.Certificate.__cmp__(self, other)
             rhsm.certificate2.Certificate.is_expired(self, on_date=None)
diff --git a/rhsm.huffman b/rhsm.huffman
new file mode 100644
index 0000000..77eff92
--- /dev/null
+++ b/rhsm.huffman
@@ -0,0 +1,67 @@
+MODULE NAME
+    rhsm.huffman
+
+
+CLASSES
+
+    class HuffmanNode(object)
+        Represents a node in a Huffman tree.
+
+
+        __init__(self, weight, value=None, left=None, right=None,
+                 parent=None)
+
+            :param weight:  number representing the weight/priority of this node
+            :type  weight:  int
+            :param value:   any value carried by this node, such as a symbol to be
+                            used in reconstructing (uncompressing) some data.
+            :param left:    child node on the left, should have weight <= right
+            :type  left:    rhsm.huffman.HuffmanNode
+            :param right:   child node on the right, should have weight >= left
+            :type  right:   rhsm.huffman.HuffmanNode
+            :param parent:  parent node
+            :type  parent:  rhsm.huffman.HuffmanNode
+
+        is_leaf(self)
+            :return:    True iff left and right are None, else False
+            :rtype:     bool
+
+        direction_from_parent(self)
+            :return:    '0' if self is left of its parent, or '1' if right
+            of parent. :rtype:     str
+
+        code(self)
+            :return:    Huffman code for this node as a series of
+            characters '0' and '1' :rtype:     str
+
+        __cmp__(self, other)
+
+        __repr__(self)
+            repr(x)
+
+        Class methods
+
+            combine(cls, left, right)
+                Combine two nodes according to Huffman's tree-building
+                algorithm. The weight of the left node should be <= that of
+                the right node. If weights are equal, left should be the
+                node that was in the queue longer. This creates a new node
+                and sets it as the parent attribute of each child.
+
+                :param left:    child node on the left, should have weight
+                <= right :type  left:    rhsm.huffman.HuffmanNode :param
+                right:   child node on the right, should have weight >=
+                left :type  right:   rhsm.huffman.HuffmanNode
+
+                :return:        new node that is the combination of left
+                and right :rtype:         rhsm.huffman.HuffmanNode
+
+            build_tree(cls, nodes)
+
+                :param nodes:   list of HuffmanNode instances that will become leaves
+                                in a Huffman tree.
+                :type  nodes:   list
+                :return:        HuffmanNode instance that is the root node of the tree
+                :rtype:         rhsm.huffman.HuffmanNode
+
+        Inherited methods
diff --git a/rhsm.pathtree b/rhsm.pathtree
new file mode 100644
index 0000000..80a622a
--- /dev/null
+++ b/rhsm.pathtree
@@ -0,0 +1,144 @@
+MODULE NAME
+    rhsm.pathtree
+
+
+CLASSES
+
+    class PathTree(object)
+
+        This builds and makes available a tree that represents matchable paths. A
+        path must be matched starting from its root and the root of the tree,
+        matching one segment at a time.
+
+        There are three trees involved in the process, and that can get confusing.
+
+        1)  Word Tree: This is a Huffman tree made from the word list provided at
+            the beginning of the data stream.
+        2)  Huffman Path Tree: This is a Huffman tree made of nodes whose values
+            will become nodes in the Path Tree. This tree exists so there can be
+            a Huffman code associated with each node in the Path Tree. However,
+            the Path Tree itself will arrange this data much differently.
+        3)  Path Tree: This is the tree used to match paths. Each node is a
+            dict where keys are path segments (the middle part of /.../) and each
+            value is a list of other nodes.
+
+
+        __init__(self, data)
+
+            Uncompresses data into a tree that can be traversed for matching paths
+
+            :param data:    binary data as read from a file or pulled directly out
+                            of a certificate extension. Data should be compressed
+                            with huffman coding as described for v3 entitlement
+                            certificates
+            :type  data:    binary string
+
+        match_path(self, path)
+            Given an absolute path, determines if the path tree contains
+            any complete paths that exactly equal the beginning of this
+            path. Thus, The tree is traversed from its root, and as long as
+            the provided path does not hit its end before hitting the end
+            of a tree path, this will return True.
+
+            :param path:    absolute path to match against the tree :type
+            path:    str :return:        True iff there is a match, else
+            False :rtype:         bool
+
+        Class methods
+
+            _traverse_tree(cls, tree, words)
+
+                Helper method for match_path that does recursive matching.
+
+                :param tree:    A dict representing a node in the greater path tree.
+                :type  tree:    dict
+                :param words:   list of words to match, the result of spliting a path
+                                by the "/" separator. Words must be sorted with the
+                                next word to match being at words[0]
+                :param words:   list
+                :return:        True iff there is a match, else False
+                :rtype:         bool
+
+            _generate_path_leaves(cls, bitstream)
+
+                Given the remaining bits after decompressing the word list, this
+                generates HummanNode objects to represent each node (besides root)
+                that will end up in the path tree.
+
+                :param bitstream:   stream of bits remaining after decompressing the
+                                    word list
+                :type  bitstream:   rhsm.bitstream.GhettoBitStream
+                :return:            list of HuffmanNode objects that can be used to
+                                    build a path tree
+                :rtype:             list of HuffmanNode objects
+
+            _generate_path_tree(cls, path_dict, path_leaves, word_dict,
+                                bitstream)
+
+                Once huffman trees have been generated for the words and for the path
+                nodes, this method uses them and the bit stream to create the path tree
+                that can be traversed to match potentially authorized paths.
+
+                :param path_dict:   dictionary where keys are huffman codes and values
+                                    are path nodes.
+                :type  path_dict:   dict
+                :param path_leaves: leaf nodes from the huffman tree of path nodes. the
+                                    values will be constructed into a new tree that can
+                                    be traversed to match actual paths.
+                :type  path_leaves: list of HuffmanNode instances
+                :param word_dict:   dict where keys are huffman codes and values are
+                                    words from the zlib-compressed word list.
+                :type  word_dict:   dict
+                :param bitstream:   bit stream where the rest of the bits describe
+                                    how to use words as references between nodes in
+                                    the path tree. This format is described in detail
+                                    in the v3 entitlement certificate docs.
+                :type  bitstream:   rhsm.bitstream.GhettoBitStream
+
+        Static methods
+
+            _unpack_data(data)
+
+                :param data:    binary data as read from a file or pulled directly out
+                                of a certificate extension. Data should be compressed
+                                with huffman coding as described for v3 entitlement
+                                certificates
+                :type  data:    binary string
+                :return:        tuple: (list of HuffmanNode instances not yet in a
+                                tree, binary string of leftover bits that were not
+                                part of the zlib-compressed word list
+                :rtype:         tuple(list, binary string)
+
+            _get_node_count(bitstream)
+
+                Determine the total number of nodes in the uncompressed tree. The
+                algorithm for doing so is described in the v3 entitlement cert
+                format documentation.
+
+                :param bitstream:   the full bit stream following the zlib-compressed
+                                    word list. As defined in the v3 entitlement cert
+                                    format, the beginning of this stream defines how
+                                    many total nodes exist. This method retrieves that
+                                    value.
+                :type  bitstream:   rhsm.bitstream.GhettoBitStream
+                :return:            number of nodes
+                :rtype:             int
+
+            _get_leaf_from_dict(code_dict, bitstream)
+                Given a bit stream and dictionary where keys are huffman
+                codes, return the value from that dictionary that
+                corresponds to the next huffman code in the stream. This is
+                a substitute for actually traversing the tree, and this
+                likely performs better in large data sets.
+
+                :param code_dict:   any dictionary where keys are huffman
+                codes :type  code_dict:   dict :param bitstream:   bit
+                stream with a huffman code as the next value :type
+                bitstream:   rhsm.bitstream.GhettoBitStream :return:
+                value from the dict
+
+        Inherited methods
+
+VARIABLES
+
+    PATH_END = 'PATH END'

commit efd93b10fec7ea52ea0afc2259999896bf25eab4
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:48:02 2012 -0500

    python-rhsm-1.1.5-1

diff --git a/rhsm.certificate2 b/rhsm.certificate2
index e08d9cb..163864d 100644
--- a/rhsm.certificate2
+++ b/rhsm.certificate2
@@ -215,7 +215,8 @@ CLASSES
                  quantity=None, virt_limit=None, socket_limit=None,
                  contract=None, quantity_used=None, warning_period=None,
                  account=None, provides_management=None, service_level=None,
-                 service_type=None, stacking_id=None, virt_only=None)
+                 service_type=None, stacking_id=None, virt_only=None,
+                 ram_limit=None)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature


commit f60ce4ddbd1ab4498e73cd6144f9063a3a57e473
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:56 2012 -0500

    python-rhsm-1.1.4-1

diff --git a/rhsm.version b/rhsm.version
index a24c520..a2e147c 100644
--- a/rhsm.version
+++ b/rhsm.version
@@ -29,6 +29,8 @@ CLASSES
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

+        _collect_data(self)
+
         _get_packages(self)

         get_version(self, package_name)

commit 1094787870ad277d53d467565e32734c30fff994
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:51 2012 -0500

    python-rhsm-1.1.3-1

diff --git a/rhsm.certificate2 b/rhsm.certificate2
index 28716d9..e08d9cb 100644
--- a/rhsm.certificate2
+++ b/rhsm.certificate2
@@ -30,7 +30,7 @@ CLASSES

         _read_subject(self, x509)

-        _create_identity_cert(self, extensions, x509, path)
+        _create_identity_cert(self, version, extensions, x509, path)

         _create_v1_prod_cert(self, version, extensions, x509, path)


commit 8e5e924d2482adbf74b280cf60b86709f7769698
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:40 2012 -0500

    python-rhsm-1.1.1-1

diff --git a/rhsm.certificate2 b/rhsm.certificate2
index 506dae4..28716d9 100644
--- a/rhsm.certificate2
+++ b/rhsm.certificate2
@@ -22,7 +22,7 @@ CLASSES
         create_from_pem(self, pem, path=None)
             Create appropriate certificate object from a PEM string.

-        _read_x509(self, x509, path)
+        _read_x509(self, x509, path, pem)

         _create_v1_cert(self, version, extensions, x509, path)

@@ -46,15 +46,15 @@ CLASSES

         _get_v1_cert_type(self, extensions)

-        _create_v2_cert(self, version, extensions, x509, path)
+        _create_v3_cert(self, version, extensions, x509, path, pem)

-        _parse_v2_order(self, payload)
+        _parse_v3_order(self, payload)

-        _parse_v2_products(self, payload)
+        _parse_v3_products(self, payload)
             Returns an ordered list of all the product data in the
             certificate.

-        _parse_v2_content(self, payload)
+        _parse_v3_content(self, payload)

         _decompress_payload(self, payload)
             Certificate payloads arrive in zlib compressed strings of JSON.
@@ -131,7 +131,7 @@ CLASSES


         __init__(self, x509=None, path=None, version=None, serial=None,
-                 start=None, end=None, subject=None)
+                 start=None, end=None, subject=None, pem=None)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

@@ -227,9 +227,9 @@ CLASSES
     class Content(object)


-        __init__(self, name=None, label=None, vendor=None, url=None,
-                 gpg=None, enabled=None, metadata_expire=None,
-                 required_tags=None)
+        __init__(self, content_type=None, name=None, label=None,
+                 vendor=None, url=None, gpg=None, enabled=None,
+                 metadata_expire=None, required_tags=None)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature


commit 7e86ed435c3494577cdd9be39f06a9a28fab4545
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:24 2012 -0500

    python-rhsm-1.0.5-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 88bf3a1..3b8753c 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -378,7 +378,7 @@ CLASSES
             Return type:
                 datetime.datetime

-        hasNow(self)
+        has_now(self)
             Get whether the certificate is valid based on the date now.
             Returns:
                 True if valid.
@@ -386,7 +386,7 @@ CLASSES
                 boolean

         has_date(self, date)
-            Get whether the certificate is valid based on the date now.
+            Get whether the certificate is valid based on the date.
             Returns:
                 True if valid.
             Return type:
@@ -394,6 +394,8 @@ CLASSES

         hasDate(self, date)

+        hasNow(self)
+
         __str__(self)

         Instance variables
diff --git a/rhsm.certificate2 b/rhsm.certificate2
index b2057be..506dae4 100644
--- a/rhsm.certificate2
+++ b/rhsm.certificate2
@@ -131,7 +131,7 @@ CLASSES


         __init__(self, x509=None, path=None, version=None, serial=None,
-                 start=None, end=None)
+                 start=None, end=None, subject=None)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

@@ -152,7 +152,7 @@ CLASSES
     class IdentityCertificate(Certificate)


-        __init__(self, alt_name=None, subject=None, **kwargs)
+        __init__(self, alt_name=None, **kwargs)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

diff --git a/rhsm.connection b/rhsm.connection
index 53776b5..14b91cc 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -135,6 +135,9 @@ CLASSES
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

+        __str__(self)
+            str(x)
+
         Inherited methods
             exceptions.BaseException.__delattr__(...)
             exceptions.BaseException.__getattribute__(...)
@@ -145,7 +148,6 @@ CLASSES
             exceptions.BaseException.__repr__(x)
             exceptions.BaseException.__setattr__(...)
             exceptions.BaseException.__setstate__(...)
-            exceptions.BaseException.__str__(x)
             exceptions.BaseException.__unicode__(...)

     class RemoteServerException(ConnectionException)
@@ -155,6 +157,9 @@ CLASSES
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

+        __str__(self)
+            str(x)
+
         Inherited methods
             exceptions.BaseException.__delattr__(...)
             exceptions.BaseException.__getattribute__(...)
@@ -165,7 +170,6 @@ CLASSES
             exceptions.BaseException.__repr__(x)
             exceptions.BaseException.__setattr__(...)
             exceptions.BaseException.__setstate__(...)
-            exceptions.BaseException.__str__(x)
             exceptions.BaseException.__unicode__(...)

     class NoOpChecker

commit b76819bb6fdc24961579e2cca6b7750c72c70880
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:19 2012 -0500

    python-rhsm-1.0.4-1

diff --git a/rhsm.certificate b/rhsm.certificate
index ac28a99..88bf3a1 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -7,6 +7,15 @@ DESCRIPTION
     custom v3 extensions.  It is not intended to be a replacement of full
     wrapper but instead an extension.

+    Several of the classes in this module are now marked deprecated in
+    favor of their new counterparts in certificate2 module. However, rather
+    than depending on either specifically, you can use the create methods
+    below to automatically create the correct object for any given
+    certificate.
+
+    Eventually the deprecated classes below will be removed, and the new
+    classes will be relocated into this module.
+

 CLASSES

@@ -62,8 +71,6 @@ CLASSES
             Return type:
                 DateRange

-        _get_datetime(self, date)
-
         valid(self, on_date=None)
             Get whether the certificate is valid based on date.
             Returns:
@@ -166,7 +173,6 @@ CLASSES
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
             rhsm.certificate.Certificate.__str__(self)
-            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
@@ -218,7 +224,6 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
-            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.RedhatCertificate._update(self, content)
             rhsm.certificate.Certificate.alternateName(self)
@@ -297,7 +302,6 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
-            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.expired(self, on_date=None)
@@ -381,13 +385,15 @@ CLASSES
             Return type:
                 boolean

-        hasDate(self, date)
+        has_date(self, date)
             Get whether the certificate is valid based on the date now.
             Returns:
                 True if valid.
             Return type:
                 boolean

+        hasDate(self, date)
+
         __str__(self)

         Instance variables
@@ -448,17 +454,15 @@ CLASSES
             Return type:
                 Extensions

-        __ext(self, x509)
+        _get_extensions_block(self, x509)
+            Isolate the block of text with the extensions.

-        __parse(self, x509)
+        _parse(self, x509)
+            Parse the extensions section. Expects an m2crypto X509 object.

         __str__(self)
             str(x)

-        Class variables
-
-            pattern = re.compile('([0-9]+\.)+[0-9]+:')
-
         Inherited methods
             dict.__cmp__(x, y)
             dict.__contains__(D, k)
@@ -701,12 +705,42 @@ CLASSES
         Inherited methods
             rhsm.certificate.Entitlement.__init__(self, ext)

+    class CertificateException(exceptions.Exception)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
 FUNCTIONS

+    create_from_file(path)
+
+    create_from_pem(pem)
+
     parse_tags(tag_str)
         Split a comma separated list of tags from a certificate into a
         list.

+    get_datetime_from_x509(date)
+
+    deprecated(func)
+        A decorator that marks a function as deprecated. This will cause a
+        warning to be emitted any time that function is used by a caller.
+
 VARIABLES

     log = logging.getLogger(__name__)
+
+    OID_PATTERN = re.compile('([0-9]+\.)+[0-9]+:')
+
+    VALUE_PATTERN = re.compile('.*prim:\s(\w*)\s*:*(.*)')
diff --git a/rhsm.certificate2 b/rhsm.certificate2
new file mode 100644
index 0000000..b2057be
--- /dev/null
+++ b/rhsm.certificate2
@@ -0,0 +1,261 @@
+MODULE NAME
+    rhsm.certificate2
+
+
+CLASSES
+
+    class _CertFactory(object)
+        Factory for creating certificate objects.
+
+        Examines the incoming file or PEM text, parses the OID structure,
+        from the server, and returns the correct implementation class.
+        determines the type of certificate we're dealing with
+        (entitlement/product), as well as the version of the certificate
+
+        NOTE: Please use the factory methods that leverage this class in
+        certificate.py instead of this class.
+
+
+        create_from_file(self, path)
+            Create appropriate certificate object from a PEM file on disk.
+
+        create_from_pem(self, pem, path=None)
+            Create appropriate certificate object from a PEM string.
+
+        _read_x509(self, x509, path)
+
+        _create_v1_cert(self, version, extensions, x509, path)
+
+        _read_alt_name(self, x509)
+
+        _read_subject(self, x509)
+
+        _create_identity_cert(self, extensions, x509, path)
+
+        _create_v1_prod_cert(self, version, extensions, x509, path)
+
+        _create_v1_ent_cert(self, version, extensions, x509, path)
+
+        _parse_v1_products(self, extensions)
+            Returns an ordered list of all the product data in the
+            certificate.
+
+        _parse_v1_order(self, extensions)
+
+        _parse_v1_content(self, extensions)
+
+        _get_v1_cert_type(self, extensions)
+
+        _create_v2_cert(self, version, extensions, x509, path)
+
+        _parse_v2_order(self, payload)
+
+        _parse_v2_products(self, payload)
+            Returns an ordered list of all the product data in the
+            certificate.
+
+        _parse_v2_content(self, payload)
+
+        _decompress_payload(self, payload)
+            Certificate payloads arrive in zlib compressed strings of JSON.
+            This method de-compresses and parses the JSON and returns the
+            resulting dict.
+
+        Inherited methods
+
+    class Version(object)
+        Small wrapper for version string comparisons.
+
+
+        __init__(self, version_str)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+
+    class _Extensions2(rhsm.certificate.Extensions)
+
+
+        _parse(self, x509)
+            Override parent method for an X509 object from the new C
+            wrapper.
+
+        Inherited methods
+            dict.__cmp__(x, y)
+            dict.__contains__(D, k)
+            dict.__delitem__(x, y)
+            dict.__eq__(x, y)
+            dict.__ge__(x, y)
+            dict.__getattribute__(...)
+            dict.__getitem__(x, y)
+            dict.__gt__(x, y)
+            rhsm.certificate.Extensions.__init__(self, x509)
+            dict.__iter__(x)
+            dict.__le__(x, y)
+            dict.__len__(x)
+            dict.__lt__(x, y)
+            dict.__ne__(x, y)
+            dict.__new__(T, S, *...)
+            dict.__repr__(x)
+            dict.__setitem__(x, i, y)
+            dict.__sizeof__(D)
+            rhsm.certificate.Extensions.__str__(self)
+            rhsm.certificate.Extensions._get_extensions_block(self, x509)
+            rhsm.certificate.Extensions.branch(self, root)
+            dict.clear(D)
+            dict.copy(D)
+            rhsm.certificate.Extensions.find(self, oid, limit=0)
+            dict.fromkeys(dict, S, v=...)
+            rhsm.certificate.Extensions.get(self, oid, default=None)
+            dict.has_key(D, k)
+            dict.items(D)
+            dict.iteritems(D)
+            dict.iterkeys(D)
+            dict.itervalues(D)
+            dict.keys(D)
+            rhsm.certificate.Extensions.ltrim(self, n)
+            dict.pop(D, k, d=...)
+            dict.popitem(D)
+            dict.setdefault(D, k, d=...)
+            dict.update(D, E, **F)
+            dict.values(D)
+
+        Inherited class variables
+            dict.__hash__ = None
+
+    class Certificate(object)
+        Parent class of all x509 certificate types.
+
+
+        __init__(self, x509=None, path=None, version=None, serial=None,
+                 start=None, end=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        is_valid(self, on_date=None)
+
+        is_expired(self, on_date=None)
+
+        __cmp__(self, other)
+
+        write(self, path)
+            Write the certificate to disk.
+
+        delete(self)
+            Delete the file associated with this certificate.
+
+        Inherited methods
+
+    class IdentityCertificate(Certificate)
+
+
+        __init__(self, alt_name=None, subject=None, **kwargs)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        Inherited methods
+            rhsm.certificate2.Certificate.__cmp__(self, other)
+            rhsm.certificate2.Certificate.delete(self)
+            rhsm.certificate2.Certificate.is_expired(self, on_date=None)
+            rhsm.certificate2.Certificate.is_valid(self, on_date=None)
+            rhsm.certificate2.Certificate.write(self, path)
+
+    class ProductCertificate(Certificate)
+
+
+        __init__(self, products=None, **kwargs)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        Inherited methods
+            rhsm.certificate2.Certificate.__cmp__(self, other)
+            rhsm.certificate2.Certificate.delete(self)
+            rhsm.certificate2.Certificate.is_expired(self, on_date=None)
+            rhsm.certificate2.Certificate.is_valid(self, on_date=None)
+            rhsm.certificate2.Certificate.write(self, path)
+
+    class EntitlementCertificate(ProductCertificate)
+
+
+        __init__(self, order=None, content=None, **kwargs)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        delete(self)
+            Override parent to also delete certificate key.
+
+        Inherited methods
+            rhsm.certificate2.Certificate.__cmp__(self, other)
+            rhsm.certificate2.Certificate.is_expired(self, on_date=None)
+            rhsm.certificate2.Certificate.is_valid(self, on_date=None)
+            rhsm.certificate2.Certificate.write(self, path)
+
+    class Product(object)
+        Represents the product information from a certificate.
+
+
+        __init__(self, id=None, name=None, version=None, architectures=None,
+                 provided_tags=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        __eq__(self, other)
+
+        Inherited methods
+
+    class Order(object)
+        Represents the order information for the subscription an
+        entitlement originated from.
+
+
+        __init__(self, name=None, number=None, sku=None, subscription=None,
+                 quantity=None, virt_limit=None, socket_limit=None,
+                 contract=None, quantity_used=None, warning_period=None,
+                 account=None, provides_management=None, service_level=None,
+                 service_type=None, stacking_id=None, virt_only=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+
+    class Content(object)
+
+
+        __init__(self, name=None, label=None, vendor=None, url=None,
+                 gpg=None, enabled=None, metadata_expire=None,
+                 required_tags=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        __eq__(self, other)
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+
+VARIABLES
+
+    log = logging.getLogger(__name__)
+
+    REDHAT_OID_NAMESPACE = "1.3.6.1.4.1.2312.9"
+
+    ORDER_NAMESPACE = "4"
+
+    EXT_ORDER_NAME = "4.1"
+
+    EXT_CERT_VERSION = "6"
+
+    EXT_ENT_PAYLOAD = "7"
+
+    PRODUCT_CERT = 1
+
+    ENTITLEMENT_CERT = 2
+
+    IDENTITY_CERT = 3

commit 931a05090bfb3fb2839dc7e48e8b26c92560a1ed
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:09 2012 -0500

    python-rhsm-1.0.2-1

diff --git a/rhsm.connection b/rhsm.connection
index 637192f..53776b5 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -69,6 +69,9 @@ CLASSES
         __init__(self, cert_path)
             Pass the full path to the bad certificate.

+        __str__(self)
+            str(x)
+
         Inherited methods
             exceptions.BaseException.__delattr__(...)
             exceptions.BaseException.__getattribute__(...)
@@ -79,7 +82,6 @@ CLASSES
             exceptions.BaseException.__repr__(x)
             exceptions.BaseException.__setattr__(...)
             exceptions.BaseException.__setstate__(...)
-            exceptions.BaseException.__str__(x)
             exceptions.BaseException.__unicode__(...)

     class RestlibException(ConnectionException)
diff --git a/rhsm.version b/rhsm.version
index b9a3adc..a24c520 100644
--- a/rhsm.version
+++ b/rhsm.version
@@ -43,6 +43,8 @@ CLASSES

             PYTHON_RHSM = "python-rhsm"

+            UPSTREAM_SERVER = "upstream-server"
+
             __shared_data = {}

             __initialized = False

commit 2a6db218b7e13afc4084805b7e2c9ab48ab54db4
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:47:04 2012 -0500

    python-rhsm-1.0.1-1

diff --git a/rhsm.config b/rhsm.config
index 6baf7a8..57f1bce 100644
--- a/rhsm.config
+++ b/rhsm.config
@@ -27,4 +27,16 @@ VARIABLES

     DEFAULT_PROXY_PORT = "3128"

+    DEFAULT_HOSTNAME = "subscription.rhn.redhat.com"
+
+    DEFAULT_PORT = "443"
+
+    DEFAULT_PREFIX = "/subscription"
+
+    DEFAULT_CDN_HOSTNAME = "cdn.redhat.com"
+
+    DEFAULT_CDN_PORT = "443"
+
+    DEFAULT_CDN_PREFIX = "/"
+
     DEFAULTS = {'hostname': 'localhost', 'prefix': '/candlepin', 'port':...
diff --git a/rhsm.connection b/rhsm.connection
index 42b7215..637192f 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -106,11 +106,10 @@ CLASSES

     class GoneException(RestlibException)
         GoneException - used to detect when a consumer has been deleted on
-        the candlepin side. We check both the deleted id and the candlepin
-        version, to ensure both were populated and have expected values
+        the candlepin side.


-        __init__(self, code, msg, deleted_id, candlepin_version)
+        __init__(self, code, msg, deleted_id)
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

@@ -280,15 +279,10 @@ CLASSES
         Unified Entitlement Platform.


-        __init__(self, host=config.get('server','hostname'),
-                 ssl_port=safe_int(config.get('server','port')),
-                 handler=config.get('server','prefix'),
-                 proxy_hostname=config.get('server','proxy_hostname'),
-                 proxy_port=config.get('server','proxy_port'),
-                 proxy_user=config.get('server','proxy_user'),
-                 proxy_password=config.get('server','proxy_password'),
-                 username=None, password=None, cert_file=None,
-                 key_file=None, insecure=None)
+        __init__(self, host=None, ssl_port=None, handler=None,
+                 proxy_hostname=None, proxy_port=None, proxy_user=None,
+                 proxy_password=None, username=None, password=None,
+                 cert_file=None, key_file=None, insecure=None)
             Two ways to authenticate:

               - username/password for HTTP basic authentication. (owner
@@ -438,6 +432,8 @@ CLASSES

         regenIdCertificate(self, consumerId)

+        getStatus(self)
+
         activateMachine(self, consumerId, email=None, lang=None)
             Activate a subscription by machine, information is located in
             the consumer facts
diff --git a/rhsm.version b/rhsm.version
new file mode 100644
index 0000000..b9a3adc
--- /dev/null
+++ b/rhsm.version
@@ -0,0 +1,52 @@
+MODULE NAME
+    rhsm.version
+
+
+CLASSES
+
+    class VersionError(exceptions.Exception)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class Versions(object)
+        Collects version information about the installed versions of
+        python-rhsm and subscription-manager RPMs.
+
+
+        __init__(self)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        _get_packages(self)
+
+        get_version(self, package_name)
+
+        get_release(self, package_name)
+
+        _get_package_attribute(self, package_name, attribute_name)
+
+        Class variables
+
+            SUBSCRIPTION_MANAGER = "subscription-manager"
+
+            PYTHON_RHSM = "python-rhsm"
+
+            __shared_data = {}
+
+            __initialized = False
+
+            __to_collect = [SUBSCRIPTION_MANAGER, PYTHON_RHSM]
+
+        Inherited methods

commit dc020347163acf28d1a2c8733918c9698b6c7f08
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:48 2012 -0500

    python-rhsm-0.99.6-1

diff --git a/rhsm.connection b/rhsm.connection
index e6c181b..42b7215 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -219,6 +219,30 @@ CLASSES
         Inherited nested classes
             class httplib.HTTPConnection.response_class

+    class ContentConnection(object)
+
+
+        __init__(self, host, ssl_port=None, username=None, password=None,
+                 proxy_hostname=None, proxy_port=None, proxy_user=None,
+                 proxy_password=None, ca_dir=None, insecure=False,
+                 ssl_verify_depth=1)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        _request(self, request_type, handler, body=None)
+
+        _load_ca_certificates(self, context)
+
+        test(self)
+
+        request_get(self, method)
+
+        get_versions(self, path)
+
+        _get_versions_for_product(self, product_id)
+
+        Inherited methods
+
     class Restlib(object)
         A wrapper around httplib to make rest calls easier

@@ -314,7 +338,7 @@ CLASSES
             Update a consumers facts on candlepin server

         updateConsumer(self, uuid, facts=None, installed_products=None,
-                       guest_uuids=None, service_level=None)
+                       guest_uuids=None, service_level=None, release=None)
             Update a consumer on the server.

             Rather than requiring a full representation of the consumer,
@@ -388,6 +412,8 @@ CLASSES

         getProduct(self, product_id)

+        getRelease(self, consumerId)
+
         getEntitlementList(self, consumerId)

         getServiceLevelList(self, owner_key)

commit 9c3904b5845b0793313d8cb9c5449020c75fc9aa
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:44 2012 -0500

    python-rhsm-0.99.5-1

diff --git a/rhsm.connection b/rhsm.connection
index 53d7e2b..e6c181b 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -257,7 +257,7 @@ CLASSES


         __init__(self, host=config.get('server','hostname'),
-                 ssl_port=int(config.get('server','port')),
+                 ssl_port=safe_int(config.get('server','port')),
                  handler=config.get('server','prefix'),
                  proxy_hostname=config.get('server','proxy_hostname'),
                  proxy_port=config.get('server','proxy_port'),
@@ -365,6 +365,14 @@ CLASSES
             the server will not be able to fulfill the client's product
             certs with entitlements.

+        dryRunBind(self, consumer_uuid, service_level)
+            Performs a dry-run autobind on the server and returns the
+            results of what we would get. Callers can use this information
+            to determine if they wish to perform the autobind, and to
+            explicitly grab entitlements from each pool returned.
+
+            Return will be a dict containing a "quantity" and a "pool".
+
         unbindBySerial(self, consumerId, serial)

         unbindAll(self, consumerId)
@@ -412,6 +420,8 @@ CLASSES

 FUNCTIONS

+    safe_int(value, safe_value=None)
+
     _get_locale()

 VARIABLES

commit 51f727a3c8e9848ec508dd8cffe84edece44f617
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:40 2012 -0500

    python-rhsm-0.99.4-1

diff --git a/rhsm.connection b/rhsm.connection
index 71c7906..53d7e2b 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -104,6 +104,29 @@ CLASSES
             exceptions.BaseException.__setstate__(...)
             exceptions.BaseException.__unicode__(...)

+    class GoneException(RestlibException)
+        GoneException - used to detect when a consumer has been deleted on
+        the candlepin side. We check both the deleted id and the candlepin
+        version, to ensure both were populated and have expected values
+
+
+        __init__(self, code, msg, deleted_id, candlepin_version)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            rhsm.connection.RestlibException.__str__(self)
+            exceptions.BaseException.__unicode__(...)
+
     class NetworkException(ConnectionException)


@@ -291,7 +314,7 @@ CLASSES
             Update a consumers facts on candlepin server

         updateConsumer(self, uuid, facts=None, installed_products=None,
-                       guest_uuids=None)
+                       guest_uuids=None, service_level=None)
             Update a consumer on the server.

             Rather than requiring a full representation of the consumer,
@@ -359,6 +382,9 @@ CLASSES

         getEntitlementList(self, consumerId)

+        getServiceLevelList(self, owner_key)
+            List the service levels available for an owner.
+
         getEnvironmentList(self, owner_key)
             List the environments for a particular owner.


commit 04712fdc4d00834b49b55497d1ad42931d80079e
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:32 2012 -0500

    python-rhsm-0.99.2-1

diff --git a/rhsm.certificate b/rhsm.certificate
index a557a37..ac28a99 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -71,6 +71,13 @@ CLASSES
             Return type:
                 boolean

+        expired(self, on_date=None)
+            Get whether the certificate is expired based on date.
+            Returns:
+                True if valid.
+            Return type:
+                boolean
+
         bogus(self)
             Get whether the certificate contains bogus data or is otherwise
             unsuitable.  The certificate may be valid but still be
@@ -163,6 +170,7 @@ CLASSES
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
+            rhsm.certificate.Certificate.expired(self, on_date=None)
             rhsm.certificate.Certificate.extensions(self)
             rhsm.certificate.Certificate.read(self, pem_path)
             rhsm.certificate.Certificate.serialNumber(self)
@@ -215,6 +223,7 @@ CLASSES
             rhsm.certificate.RedhatCertificate._update(self, content)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
+            rhsm.certificate.Certificate.expired(self, on_date=None)
             rhsm.certificate.Certificate.extensions(self)
             rhsm.certificate.Certificate.read(self, pem_path)
             rhsm.certificate.RedhatCertificate.redhat(self)
@@ -268,16 +277,6 @@ CLASSES
             Return type:
                 [Role,..]

-        validRange(self)
-            Get the valid date range.
-
-            Overrides the Certificate method to look at the Order end date,
-            ignoring the grace period (if there is one).
-            Returns:
-                The valid date range.
-            Return type:
-                DateRange
-
         validRangeWithGracePeriod(self)

         validWithGracePeriod(self)
@@ -301,6 +300,7 @@ CLASSES
             rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
+            rhsm.certificate.Certificate.expired(self, on_date=None)
             rhsm.certificate.Certificate.extensions(self)
             rhsm.certificate.ProductCertificate.getProduct(self)
             rhsm.certificate.ProductCertificate.getProducts(self)
@@ -310,6 +310,7 @@ CLASSES
             rhsm.certificate.Certificate.subject(self)
             rhsm.certificate.Certificate.toPEM(self)
             rhsm.certificate.Certificate.valid(self, on_date=None)
+            rhsm.certificate.Certificate.validRange(self)
             rhsm.certificate.Certificate.write(self, pem_path)

         Inherited instance variables

commit 93395af844a7bc40c166c56741a4faa52175ea64
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:28 2012 -0500

    python-rhsm-0.98.7-1

diff --git a/rhsm.connection b/rhsm.connection
index 0382c70..71c7906 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -275,6 +275,18 @@ CLASSES
                          installed_products=None)
             Creates a consumer on candlepin server

+        hypervisorCheckIn(self, owner, env, host_guest_mapping)
+
+            Sends a mapping of hostIds to list of guestIds to candlepin
+            to be registered/updated.
+
+            host_guest_mapping is as follows:
+
+            {
+                'host-id-1': ['guest-id-1', 'guest-id-2'],
+                'host-id-2': ['guest-id-3', 'guest-id-4']
+            }
+
         updateConsumerFacts(self, consumer_uuid, facts={})
             Update a consumers facts on candlepin server


commit 871d3332b6e0e42a9c9519ffe9e7c859bcf28317
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:16 2012 -0500

    python-rhsm-0.98.4-1

diff --git a/rhsm.connection b/rhsm.connection
index ee4cff5..0382c70 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -157,11 +157,13 @@ CLASSES
         endheaders(self, body=None)
             Indicate that the last header line has been sent to the server.

+        _get_connect_msg(self)
+            Return an HTTP CONNECT request to send to the proxy.
+
         Inherited methods
             M2Crypto.httpslib.ProxyHTTPSConnection.__init__(self, host, port=None, strict=None, username=None,
                  password=None, **ssl)
             M2Crypto.httpslib.ProxyHTTPSConnection._encode_auth(self)
-            M2Crypto.httpslib.ProxyHTTPSConnection._get_connect_msg(self)
             httplib.HTTPConnection._output(self, s)
             httplib.HTTPConnection._send_output(self)
             httplib.HTTPConnection._send_request(self, method, url, body, headers)

commit 09a8e9cd23d7b44d879b31f05fa2700aacf10b43
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:12 2012 -0500

    python-rhsm-0.98.3-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 6d3cc00..a557a37 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -237,6 +237,9 @@ CLASSES

         _update(self, content)

+        delete(self)
+            Delete the file associated with this certificate.
+
         getOrder(self)
             Get the order object defined in the certificate.
             Returns:
@@ -298,7 +301,6 @@ CLASSES
             rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
-            rhsm.certificate.Certificate.delete(self)
             rhsm.certificate.Certificate.extensions(self)
             rhsm.certificate.ProductCertificate.getProduct(self)
             rhsm.certificate.ProductCertificate.getProducts(self)
diff --git a/rhsm.config b/rhsm.config
index 4327470..6baf7a8 100644
--- a/rhsm.config
+++ b/rhsm.config
@@ -13,6 +13,8 @@ CLASSES

         get(self, section, prop)

+        defaults(self)
+
 FUNCTIONS

     initConfig(config_file=None)

commit 556b88266ba88bbcd392787708ba6e3c7c37dcc5
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:46:05 2012 -0500

    python-rhsm-0.97.1-1

diff --git a/rhsm.connection b/rhsm.connection
index 46cd233..ee4cff5 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -276,13 +276,18 @@ CLASSES
         updateConsumerFacts(self, consumer_uuid, facts={})
             Update a consumers facts on candlepin server

-        updateConsumer(self, uuid, facts=None, installed_products=None)
+        updateConsumer(self, uuid, facts=None, installed_products=None,
+                       guest_uuids=None)
             Update a consumer on the server.

             Rather than requiring a full representation of the consumer,
             only some information is passed depending on what we wish to
             update.

+            Note that installed_products and guest_uuids expects a certain
+            format, example parsing is in subscription-manager's
+            format_for_server() method.
+
         updatePackageProfile(self, consumer_uuid, pkg_dicts)
             Updates the consumer's package profile on the server.

@@ -316,7 +321,7 @@ CLASSES
             ID. This will cause the UEP to look for one or more pools which
             provide access to the given product.

-        bind(self, consumerId, future_date=None)
+        bind(self, consumerId, entitle_date=None)
             Same as bindByProduct, but assume the server has a list of the
             system's products. This is useful for autosubscribe. Note that
             this is done on a best-effort basis, and there are cases when

commit 65e05b855884615e82765990bc201a18b51ef251
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:57 2012 -0500

    python-rhsm-0.96.11-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 2f07a46..6d3cc00 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -324,6 +324,8 @@ CLASSES
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

+        bogus(self)
+
         write(self, pem_path)
             Write the key.
             Returns:
@@ -619,6 +621,8 @@ CLASSES

         getStackingId(self)

+        getVirtOnly(self)
+
         __str__(self)

     class Product
diff --git a/rhsm.connection b/rhsm.connection
index 67d594d..46cd233 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -316,7 +316,7 @@ CLASSES
             ID. This will cause the UEP to look for one or more pools which
             provide access to the given product.

-        bind(self, consumerId)
+        bind(self, consumerId, future_date=None)
             Same as bindByProduct, but assume the server has a list of the
             system's products. This is useful for autosubscribe. Note that
             this is done on a best-effort basis, and there are cases when

commit 40ecc7717e2c907b8a016b308247205b76160184
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:53 2012 -0500

    python-rhsm-0.96.10-1

diff --git a/rhsm.connection b/rhsm.connection
index 2915b0f..67d594d 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -269,12 +269,20 @@ CLASSES
         ping(self, username=None, password=None)

         registerConsumer(self, name="unknown", type="system", facts={},
-                         owner=None, environment=None, keys=None)
+                         owner=None, environment=None, keys=None,
+                         installed_products=None)
             Creates a consumer on candlepin server

         updateConsumerFacts(self, consumer_uuid, facts={})
             Update a consumers facts on candlepin server

+        updateConsumer(self, uuid, facts=None, installed_products=None)
+            Update a consumer on the server.
+
+            Rather than requiring a full representation of the consumer,
+            only some information is passed depending on what we wish to
+            update.
+
         updatePackageProfile(self, consumer_uuid, pkg_dicts)
             Updates the consumer's package profile on the server.

@@ -308,6 +316,13 @@ CLASSES
             ID. This will cause the UEP to look for one or more pools which
             provide access to the given product.

+        bind(self, consumerId)
+            Same as bindByProduct, but assume the server has a list of the
+            system's products. This is useful for autosubscribe. Note that
+            this is done on a best-effort basis, and there are cases when
+            the server will not be able to fulfill the client's product
+            certs with entitlements.
+
         unbindBySerial(self, consumerId, serial)

         unbindAll(self, consumerId)

commit ebdc5529b834bcc848d9706d24ba495d5c37c43c
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:49 2012 -0500

    python-rhsm-0.96.9-1

diff --git a/rhsm.connection b/rhsm.connection
index fe3db81..2915b0f 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -144,6 +144,13 @@ CLASSES
             exceptions.BaseException.__str__(x)
             exceptions.BaseException.__unicode__(...)

+    class NoOpChecker
+
+
+        __init__(self, host=None, peerCertHash=None, peerCertDigest='sha1')
+
+        __call__(self, peerCert, host=None)
+
     class RhsmProxyHTTPSConnection(M2Crypto.httpslib.ProxyHTTPSConnection)


@@ -296,15 +303,13 @@ CLASSES
         bindByEntitlementPool(self, consumerId, poolId, quantity=None)
             Subscribe consumer to a subscription by pool ID.

-        bindByProduct(self, consumerId, products, quantity=None)
+        bindByProduct(self, consumerId, products)
             Subscribe consumer directly to one or more products by their
             ID. This will cause the UEP to look for one or more pools which
             provide access to the given product.

         unbindBySerial(self, consumerId, serial)

-        unbindByEntitlementId(self, consumerId, entId)
-
         unbindAll(self, consumerId)

         getPoolsList(self, consumer=None, listAll=False, active_on=None,
@@ -343,6 +348,8 @@ CLASSES
             Activate a subscription by machine, information is located in
             the consumer facts

+        sanitize(self, urlParam, plus=False)
+
 FUNCTIONS

     _get_locale()

commit af14de4f85f70fe377bd09d6ce61b16f7a72dca3
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:45 2012 -0500

    python-rhsm-0.96.8-1

diff --git a/rhsm.connection b/rhsm.connection
index 9bf771a..fe3db81 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -262,11 +262,7 @@ CLASSES
         ping(self, username=None, password=None)

         registerConsumer(self, name="unknown", type="system", facts={},
-                         owner=None, environment=None)
-            Creates a consumer on candlepin server
-
-        registerConsumerWithKeys(self, name="unknown", type="system",
-                                 facts={}, keys=[])
+                         owner=None, environment=None, keys=None)
             Creates a consumer on candlepin server

         updateConsumerFacts(self, consumer_uuid, facts={})

commit 894e044b5ede921562cb745f9ea8b5fe9af8aa56
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:41 2012 -0500

    python-rhsm-0.96.7-1

diff --git a/rhsm.connection b/rhsm.connection
index 8c3a9cc..9bf771a 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -243,7 +243,14 @@ CLASSES
             Must specify one method of authentication or the other, not
             both.

-        add_ssl_certs(self, cert_file=None, key_file=None)
+        _load_supported_resources(self)
+            Load the list of supported resources by doing a GET on the root
+            of the web application we're configured to use.
+
+            Need to handle exceptions here because sometimes UEPConnections
+            are created in a state where they can't actually be used. (they
+            get replaced later) If something goes wrong making this
+            request, just leave the list of supported resources empty.

         supports_resource(self, resource_name)
             Check if the server we're connecting too supports a particular
@@ -265,7 +272,13 @@ CLASSES
         updateConsumerFacts(self, consumer_uuid, facts={})
             Update a consumers facts on candlepin server

-        getConsumer(self, uuid, username, password)
+        updatePackageProfile(self, consumer_uuid, pkg_dicts)
+            Updates the consumer's package profile on the server.
+
+            pkg_dicts expected to be a list of dicts, each containing the
+            package headers we're interested in. See profile.py.
+
+        getConsumer(self, uuid, username=None, password=None)
             Returns a consumer object with pem/key for existing consumers

         getOwner(self, uuid)
diff --git a/rhsm.profile b/rhsm.profile
index 8432ab4..fdbf749 100644
--- a/rhsm.profile
+++ b/rhsm.profile
@@ -21,14 +21,35 @@ CLASSES
             exceptions.BaseException.__str__(x)
             exceptions.BaseException.__unicode__(...)

+    class Package(object)
+        Represents a package installed on the system.
+
+
+        __init__(self, name, version, release, arch, epoch=0, vendor=None,
+                 from_dict=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        to_dict(self)
+            Returns a dict representation of this packages info.
+
+        __eq__(self, other)
+            Compare one profile to another to determine if anything has
+            changed.
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+
     class RPMProfile(object)


-        collect(self)
-            Initialize rpm transaction and invoke the accumulation call
-            @return : list of package info dicts
-            Return type:
-                list
+        __init__(self, from_file=None)
+            Load the RPM package profile from a given file, or from rpm
+            itself.
+
+            NOTE: from_file is a file descriptor, not a file name.

         __accumulateProfile(self, rpm_header_list)
             Accumulates list of installed rpm info
@@ -37,6 +58,20 @@ CLASSES
             Return type:
                 list

+        collect(self)
+            Returns a list of dicts containing the package info.
+
+            See 'packages' member on this object for a list of actual
+            objects.
+
+            @return : list of package info dicts
+            Return type:
+                list
+
+        __eq__(self, other)
+            Compare one profile to another to determine if anything has
+            changed.
+
         Inherited methods

 FUNCTIONS
@@ -46,4 +81,6 @@ FUNCTIONS

 VARIABLES

+    log = logging.getLogger(__name__)
+
     PROFILE_MAP = {"rpm": RPMProfile,}

commit a4e2b6a20eaf82b70dd58fc1ad7f770b4b47edd4
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:37 2012 -0500

    python-rhsm-0.96.6-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 786d23c..2f07a46 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -600,6 +600,12 @@ CLASSES
         getContract(self)

         getQuantityUsed(self)
+            Returns the quantity of the subscription that *this*
+            entitlement is using.
+
+            WARNING: a little misleading as it (a) is part of the order
+            namespace and (b) sounds suspiciously like the total consumed
+            quantity of the subscription.

         getWarningPeriod(self)

diff --git a/rhsm.connection b/rhsm.connection
index 04d5160..8c3a9cc 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -205,6 +205,8 @@ CLASSES

         validateResponse(self, response)

+        _parse_msg_from_error_response_body(self, body)
+
         request_get(self, method)

         request_post(self, method, params="")
@@ -243,12 +245,17 @@ CLASSES

         add_ssl_certs(self, cert_file=None, key_file=None)

+        supports_resource(self, resource_name)
+            Check if the server we're connecting too supports a particular
+            resource. For our use cases this is generally the plural form
+            of the resource.
+
         shutDown(self)

         ping(self, username=None, password=None)

         registerConsumer(self, name="unknown", type="system", facts={},
-                         owner=None)
+                         owner=None, environment=None)
             Creates a consumer on candlepin server

         registerConsumerWithKeys(self, name="unknown", type="system",
@@ -304,6 +311,21 @@ CLASSES

         getEntitlementList(self, consumerId)

+        getEnvironmentList(self, owner_key)
+            List the environments for a particular owner.
+
+            Some servers may not support this and will error out. The
+            caller can always check with supports_resource("environments").
+
+        getEnvironment(self, owner_key=None, name=None)
+            Fetch an environment for an owner.
+
+            If querying by name, owner is required as environment names are
+            only unique within the context of an owner.
+
+            TODO: Add support for querying by ID, this will likely hit an
+            entirely different URL.
+
         getEntitlement(self, entId)

         regenIdCertificate(self, consumerId)
diff --git a/rhsm.profile b/rhsm.profile
index 9e5549c..8432ab4 100644
--- a/rhsm.profile
+++ b/rhsm.profile
@@ -5,6 +5,7 @@ MODULE NAME
 CLASSES

     class InvalidProfileType(exceptions.Exception)
+        Thrown when attempting to get a profile of an unsupported type.

         Inherited methods
             exceptions.BaseException.__delattr__(...)
@@ -38,10 +39,6 @@ CLASSES

         Inherited methods

-    class GemProfile(object)
-
-        Inherited methods
-
 FUNCTIONS

     get_profile(profile_type)

commit e3b668bdfbd4049c9acd639abb5f1bbe510d0615
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:34 2012 -0500

    python-rhsm-0.96.5-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 7670939..786d23c 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -13,11 +13,11 @@ CLASSES
     class UTC(datetime.tzinfo)


-        tzname(self, dt)
+        tzname(self, date_time)

-        dst(self, dt)
+        dst(self, date_time)

-        utcoffset(self, dt)
+        utcoffset(self, date_time)

         __repr__(self)

@@ -87,14 +87,14 @@ CLASSES
             Return type:
                 Extensions

-        read(self, path)
+        read(self, pem_path)
             Read a certificate file.
             Returns:
                 A certificate
             Return type:
                 Certificate

-        write(self, path)
+        write(self, pem_path)
             Write the certificate.
             Returns:
                 self
@@ -164,13 +164,13 @@ CLASSES
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
             rhsm.certificate.Certificate.extensions(self)
-            rhsm.certificate.Certificate.read(self, path)
+            rhsm.certificate.Certificate.read(self, pem_path)
             rhsm.certificate.Certificate.serialNumber(self)
             rhsm.certificate.Certificate.subject(self)
             rhsm.certificate.Certificate.toPEM(self)
             rhsm.certificate.Certificate.valid(self, on_date=None)
             rhsm.certificate.Certificate.validRange(self)
-            rhsm.certificate.Certificate.write(self, path)
+            rhsm.certificate.Certificate.write(self, pem_path)

         Inherited instance variables
             rhsm.certificate.Certificate.x509
@@ -216,14 +216,14 @@ CLASSES
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
             rhsm.certificate.Certificate.extensions(self)
-            rhsm.certificate.Certificate.read(self, path)
+            rhsm.certificate.Certificate.read(self, pem_path)
             rhsm.certificate.RedhatCertificate.redhat(self)
             rhsm.certificate.Certificate.serialNumber(self)
             rhsm.certificate.Certificate.subject(self)
             rhsm.certificate.Certificate.toPEM(self)
             rhsm.certificate.Certificate.valid(self, on_date=None)
             rhsm.certificate.Certificate.validRange(self)
-            rhsm.certificate.Certificate.write(self, path)
+            rhsm.certificate.Certificate.write(self, pem_path)

         Inherited instance variables
             rhsm.certificate.Certificate.x509
@@ -302,13 +302,13 @@ CLASSES
             rhsm.certificate.Certificate.extensions(self)
             rhsm.certificate.ProductCertificate.getProduct(self)
             rhsm.certificate.ProductCertificate.getProducts(self)
-            rhsm.certificate.Certificate.read(self, path)
+            rhsm.certificate.Certificate.read(self, pem_path)
             rhsm.certificate.RedhatCertificate.redhat(self)
             rhsm.certificate.Certificate.serialNumber(self)
             rhsm.certificate.Certificate.subject(self)
             rhsm.certificate.Certificate.toPEM(self)
             rhsm.certificate.Certificate.valid(self, on_date=None)
-            rhsm.certificate.Certificate.write(self, path)
+            rhsm.certificate.Certificate.write(self, pem_path)

         Inherited instance variables
             rhsm.certificate.Certificate.x509
@@ -324,7 +324,7 @@ CLASSES
             x.__init__(...) initializes x; see x.__class__.__doc__ for
             signature

-        write(self, path)
+        write(self, pem_path)
             Write the key.
             Returns:
                 self
@@ -337,7 +337,7 @@ CLASSES

         Class methods

-            read(cls, path)
+            read(cls, pem_path)
                 Read the key.

         Instance variables
@@ -397,11 +397,11 @@ CLASSES
         GMT


-        utcoffset(self, dt)
+        utcoffset(self, date_time)

-        tzname(self, dt)
+        tzname(self, date_time)

-        dst(self, dt)
+        dst(self, date_time)

     class Extensions(dict)
         Represents x.509 (v3) custom extensions.
@@ -618,7 +618,7 @@ CLASSES
     class Product


-        __init__(self, hash, ext)
+        __init__(self, p_hash, ext)

         getHash(self)

@@ -688,28 +688,6 @@ CLASSES
         Inherited methods
             rhsm.certificate.Entitlement.__init__(self, ext)

-    class Bundle(object)
-
-
-        __init__(self, key=None, cert=None)
-            x.__init__(...) initializes x; see x.__class__.__doc__ for
-            signature
-
-        read(self, path)
-
-        write(self, path)
-
-        __str__(self)
-            str(x)
-
-        Class variables
-
-            KEY_PATTERN = re.compile('-----BEGIN.+KEY-----\n.+\n-----END...
-
-            CERT_PATTERN = re.compile('-----BEGIN CERTIFICATE-----\n.+\n...
-
-        Inherited methods
-
 FUNCTIONS

     parse_tags(tag_str)
diff --git a/rhsm.connection b/rhsm.connection
index 945decc..04d5160 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -248,7 +248,11 @@ CLASSES
         ping(self, username=None, password=None)

         registerConsumer(self, name="unknown", type="system", facts={},
-                         owner="default")
+                         owner=None)
+            Creates a consumer on candlepin server
+
+        registerConsumerWithKeys(self, name="unknown", type="system",
+                                 facts={}, keys=[])
             Creates a consumer on candlepin server

         updateConsumerFacts(self, consumer_uuid, facts={})
@@ -273,13 +277,10 @@ CLASSES
         getCertificateSerials(self, consumerId)
             Get serial numbers for certs for a given consumer

-        bindByRegNumber(self, consumerId, regnum, email=None, lang=None)
-            Subscribe consumer to a subscription token
-
         bindByEntitlementPool(self, consumerId, poolId, quantity=None)
             Subscribe consumer to a subscription by pool ID.

-        bindByProduct(self, consumerId, products)
+        bindByProduct(self, consumerId, products, quantity=None)
             Subscribe consumer directly to one or more products by their
             ID. This will cause the UEP to look for one or more pools which
             provide access to the given product.
@@ -290,8 +291,12 @@ CLASSES

         unbindAll(self, consumerId)

-        getPoolsList(self, ownerid, consumerid, listAll=False,
-                     active_on=None)
+        getPoolsList(self, consumer=None, listAll=False, active_on=None,
+                     owner=None)
+            List pools for a given consumer or owner.
+
+            Ideally, try to always pass the owner key argument. The old
+            method is deprecated and may eventually be removed.

         getPool(self, poolId)

diff --git a/rhsm.profile b/rhsm.profile
index 1495ec6..9e5549c 100644
--- a/rhsm.profile
+++ b/rhsm.profile
@@ -44,7 +44,7 @@ CLASSES

 FUNCTIONS

-    get_profile(type)
+    get_profile(profile_type)
         Returns an instance of a Profile object

 VARIABLES

commit 20d2a8010ef2bf7b69992e6e84fdbc18f2e71ccf
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:30 2012 -0500

    python-rhsm-0.96.4-1

diff --git a/rhsm.certificate b/rhsm.certificate
index b69b5b3..7670939 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -611,6 +611,8 @@ CLASSES

         getSupportType(self)

+        getStackingId(self)
+
         __str__(self)

     class Product
diff --git a/rhsm.connection b/rhsm.connection
index 342fc79..945decc 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -247,7 +247,8 @@ CLASSES

         ping(self, username=None, password=None)

-        registerConsumer(self, name="unknown", type="system", facts={})
+        registerConsumer(self, name="unknown", type="system", facts={},
+                         owner="default")
             Creates a consumer on candlepin server

         updateConsumerFacts(self, consumer_uuid, facts={})
@@ -256,6 +257,12 @@ CLASSES
         getConsumer(self, uuid, username, password)
             Returns a consumer object with pem/key for existing consumers

+        getOwner(self, uuid)
+            Returns an owner object with pem/key for existing consumers
+
+        getOwnerList(self, username)
+            Returns an owner objects with pem/key for existing consumers
+
         unregisterConsumer(self, consumerId)
             Deletes a consumer from candlepin server

@@ -283,7 +290,8 @@ CLASSES

         unbindAll(self, consumerId)

-        getPoolsList(self, consumerId, listAll=False, active_on=None)
+        getPoolsList(self, ownerid, consumerid, listAll=False,
+                     active_on=None)

         getPool(self, poolId)

diff --git a/rhsm.profile b/rhsm.profile
new file mode 100644
index 0000000..1495ec6
--- /dev/null
+++ b/rhsm.profile
@@ -0,0 +1,52 @@
+MODULE NAME
+    rhsm.profile
+
+
+CLASSES
+
+    class InvalidProfileType(exceptions.Exception)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class RPMProfile(object)
+
+
+        collect(self)
+            Initialize rpm transaction and invoke the accumulation call
+            @return : list of package info dicts
+            Return type:
+                list
+
+        __accumulateProfile(self, rpm_header_list)
+            Accumulates list of installed rpm info
+            Returns:
+                list of package info dicts
+            Return type:
+                list
+
+        Inherited methods
+
+    class GemProfile(object)
+
+        Inherited methods
+
+FUNCTIONS
+
+    get_profile(type)
+        Returns an instance of a Profile object
+
+VARIABLES
+
+    PROFILE_MAP = {"rpm": RPMProfile,}

commit 7295b5cc028df329a5dc4006c773ca4157950b7c
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:26 2012 -0500

    python-rhsm-0.96.3-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 4eaa08d..b69b5b3 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -10,6 +10,17 @@ DESCRIPTION

 CLASSES

+    class UTC(datetime.tzinfo)
+
+
+        tzname(self, dt)
+
+        dst(self, dt)
+
+        utcoffset(self, dt)
+
+        __repr__(self)
+
     class Certificate(object)
         Represents and x.509 certificate.

@@ -51,6 +62,8 @@ CLASSES
             Return type:
                 DateRange

+        _get_datetime(self, date)
+
         valid(self, on_date=None)
             Get whether the certificate is valid based on date.
             Returns:
@@ -146,6 +159,7 @@ CLASSES
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
             rhsm.certificate.Certificate.__str__(self)
+            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
@@ -196,6 +210,7 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.RedhatCertificate._update(self, content)
             rhsm.certificate.Certificate.alternateName(self)
@@ -280,6 +295,7 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
@@ -606,12 +622,12 @@ CLASSES

         getName(self)

-        getVariant(self)
-
         getArch(self)

         getVersion(self)

+        getProvidedTags(self)
+
         __eq__(self, rhs)

         __str__(self)
@@ -626,6 +642,8 @@ CLASSES
     class Content(Entitlement)


+        __init__(self, ext)
+
         getName(self)

         getLabel(self)
@@ -644,15 +662,14 @@ CLASSES

         getMetadataExpire(self)

+        getRequiredTags(self)
+
         __eq__(self, rhs)

         __str__(self)

         __repr__(self)

-        Inherited methods
-            rhsm.certificate.Entitlement.__init__(self, ext)
-
     class Role(Entitlement)


@@ -691,6 +708,12 @@ CLASSES

         Inherited methods

+FUNCTIONS
+
+    parse_tags(tag_str)
+        Split a comma separated list of tags from a certificate into a
+        list.
+
 VARIABLES

     log = logging.getLogger(__name__)
diff --git a/rhsm.connection b/rhsm.connection
index 920334e..342fc79 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -299,6 +299,10 @@ CLASSES
             Activate a subscription by machine, information is located in
             the consumer facts

+FUNCTIONS
+
+    _get_locale()
+
 VARIABLES

     h = NullHandler()

commit db916d6dd148062856617b9b75b180c61292601e
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:45:20 2012 -0500

    python-rhsm-0.96.1-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 6dd1dac..4eaa08d 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -606,12 +606,12 @@ CLASSES

         getName(self)

+        getVariant(self)
+
         getArch(self)

         getVersion(self)

-        getProvidedTags(self)
-
         __eq__(self, rhs)

         __str__(self)
@@ -626,8 +626,6 @@ CLASSES
     class Content(Entitlement)


-        __init__(self, ext)
-
         getName(self)

         getLabel(self)
@@ -646,14 +644,15 @@ CLASSES

         getMetadataExpire(self)

-        getRequiredTags(self)
-
         __eq__(self, rhs)

         __str__(self)

         __repr__(self)

+        Inherited methods
+            rhsm.certificate.Entitlement.__init__(self, ext)
+
     class Role(Entitlement)


@@ -692,12 +691,6 @@ CLASSES

         Inherited methods

-FUNCTIONS
-
-    parse_tags(tag_str)
-        Split a comma separated list of tags from a certificate into a
-        list.
-
 VARIABLES

     log = logging.getLogger(__name__)
diff --git a/rhsm.connection b/rhsm.connection
index 342fc79..920334e 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -299,10 +299,6 @@ CLASSES
             Activate a subscription by machine, information is located in
             the consumer facts

-FUNCTIONS
-
-    _get_locale()
-
 VARIABLES

     h = NullHandler()

commit 11890c8a102d7cc7218d7edefa32950324733d99
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:54 2012 -0500

    python-rhsm-0.95.7-1

diff --git a/rhsm.connection b/rhsm.connection
index 920334e..342fc79 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -299,6 +299,10 @@ CLASSES
             Activate a subscription by machine, information is located in
             the consumer facts

+FUNCTIONS
+
+    _get_locale()
+
 VARIABLES

     h = NullHandler()

commit 20a132a17361dad6c30a725a2071927d89d2e692
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:51 2012 -0500

    python-rhsm-0.95.6-1

diff --git a/rhsm.certificate b/rhsm.certificate
index b69b5b3..6dd1dac 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -10,17 +10,6 @@ DESCRIPTION

 CLASSES

-    class UTC(datetime.tzinfo)
-
-
-        tzname(self, dt)
-
-        dst(self, dt)
-
-        utcoffset(self, dt)
-
-        __repr__(self)
-
     class Certificate(object)
         Represents and x.509 certificate.

@@ -62,8 +51,6 @@ CLASSES
             Return type:
                 DateRange

-        _get_datetime(self, date)
-
         valid(self, on_date=None)
             Get whether the certificate is valid based on date.
             Returns:
@@ -159,7 +146,6 @@ CLASSES
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
             rhsm.certificate.Certificate.__str__(self)
-            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
@@ -210,7 +196,6 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
-            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.RedhatCertificate._update(self, content)
             rhsm.certificate.Certificate.alternateName(self)
@@ -295,7 +280,6 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
-            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
diff --git a/rhsm.connection b/rhsm.connection
index 38a0298..920334e 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -150,13 +150,11 @@ CLASSES
         endheaders(self, body=None)
             Indicate that the last header line has been sent to the server.

-        _get_connect_msg(self)
-            Return an HTTP CONNECT request to send to the proxy.
-
         Inherited methods
             M2Crypto.httpslib.ProxyHTTPSConnection.__init__(self, host, port=None, strict=None, username=None,
                  password=None, **ssl)
             M2Crypto.httpslib.ProxyHTTPSConnection._encode_auth(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection._get_connect_msg(self)
             httplib.HTTPConnection._output(self, s)
             httplib.HTTPConnection._send_output(self)
             httplib.HTTPConnection._send_request(self, method, url, body, headers)
@@ -301,10 +299,6 @@ CLASSES
             Activate a subscription by machine, information is located in
             the consumer facts

-FUNCTIONS
-
-    _get_locale()
-
 VARIABLES

     h = NullHandler()

commit 4d3b41b40e1c3a0d6d936ac26fa740534dd27727
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:44 2012 -0500

    python-rhsm-0.95.5.4-1

diff --git a/rhsm.connection b/rhsm.connection
index 920334e..38a0298 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -150,11 +150,13 @@ CLASSES
         endheaders(self, body=None)
             Indicate that the last header line has been sent to the server.

+        _get_connect_msg(self)
+            Return an HTTP CONNECT request to send to the proxy.
+
         Inherited methods
             M2Crypto.httpslib.ProxyHTTPSConnection.__init__(self, host, port=None, strict=None, username=None,
                  password=None, **ssl)
             M2Crypto.httpslib.ProxyHTTPSConnection._encode_auth(self)
-            M2Crypto.httpslib.ProxyHTTPSConnection._get_connect_msg(self)
             httplib.HTTPConnection._output(self, s)
             httplib.HTTPConnection._send_output(self)
             httplib.HTTPConnection._send_request(self, method, url, body, headers)
@@ -299,6 +301,10 @@ CLASSES
             Activate a subscription by machine, information is located in
             the consumer facts

+FUNCTIONS
+
+    _get_locale()
+
 VARIABLES

     h = NullHandler()

commit a90c3098eb7758e36107aaf298f0abb8d21214c1
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:38 2012 -0500

    python-rhsm-0.95.5.2-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 6dd1dac..b69b5b3 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -10,6 +10,17 @@ DESCRIPTION

 CLASSES

+    class UTC(datetime.tzinfo)
+
+
+        tzname(self, dt)
+
+        dst(self, dt)
+
+        utcoffset(self, dt)
+
+        __repr__(self)
+
     class Certificate(object)
         Represents and x.509 certificate.

@@ -51,6 +62,8 @@ CLASSES
             Return type:
                 DateRange

+        _get_datetime(self, date)
+
         valid(self, on_date=None)
             Get whether the certificate is valid based on date.
             Returns:
@@ -146,6 +159,7 @@ CLASSES
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
             rhsm.certificate.Certificate.__str__(self)
+            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)
@@ -196,6 +210,7 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.RedhatCertificate._update(self, content)
             rhsm.certificate.Certificate.alternateName(self)
@@ -280,6 +295,7 @@ CLASSES
             rhsm.certificate.Certificate.__cmp__(self, other)
             rhsm.certificate.Certificate.__init__(self, content=None)
             rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate._get_datetime(self, date)
             rhsm.certificate.Certificate._parse_subject(self)
             rhsm.certificate.Certificate.alternateName(self)
             rhsm.certificate.Certificate.delete(self)

commit b41255a175429b17c6ef54f2a90ea700b8cec397
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:31 2012 -0500

    python-rhsm-0.95.4-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 4eaa08d..6dd1dac 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -606,12 +606,12 @@ CLASSES

         getName(self)

-        getVariant(self)
-
         getArch(self)

         getVersion(self)

+        getProvidedTags(self)
+
         __eq__(self, rhs)

         __str__(self)
@@ -626,6 +626,8 @@ CLASSES
     class Content(Entitlement)


+        __init__(self, ext)
+
         getName(self)

         getLabel(self)
@@ -644,15 +646,14 @@ CLASSES

         getMetadataExpire(self)

+        getRequiredTags(self)
+
         __eq__(self, rhs)

         __str__(self)

         __repr__(self)

-        Inherited methods
-            rhsm.certificate.Entitlement.__init__(self, ext)
-
     class Role(Entitlement)


@@ -691,6 +692,12 @@ CLASSES

         Inherited methods

+FUNCTIONS
+
+    parse_tags(tag_str)
+        Split a comma separated list of tags from a certificate into a
+        list.
+
 VARIABLES

     log = logging.getLogger(__name__)

commit b27eeafd9d02290d1ddb310006a80bfc8bf24fb3
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:24 2012 -0500

    python-rhsm-0.95.2-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 8693f84..4eaa08d 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -230,7 +230,7 @@ CLASSES
                 Order

         getEntitlements(self)
-            Get the all entitlements defined in the certificate.
+            Get all entitlements defined in the certificate.
             Returns:
                 A list of entitlement object.
             Return type:
@@ -642,6 +642,8 @@ CLASSES

         getEnabled(self)

+        getMetadataExpire(self)
+
         __eq__(self, rhs)

         __str__(self)

commit 3e5f03de38552fa25cc4951b60f7a70e0523d52d
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:21 2012 -0500

    python-rhsm-0.95.1-1

diff --git a/rhsm.certificate b/rhsm.certificate
index 8fb8efe..8693f84 100644
--- a/rhsm.certificate
+++ b/rhsm.certificate
@@ -589,6 +589,12 @@ CLASSES

         getAccountNumber(self)

+        getProvidesManagement(self)
+
+        getSupportLevel(self)
+
+        getSupportType(self)
+
         __str__(self)

     class Product
diff --git a/rhsm.connection b/rhsm.connection
index 2520335..920334e 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -295,6 +295,10 @@ CLASSES

         regenIdCertificate(self, consumerId)

+        activateMachine(self, consumerId, email=None, lang=None)
+            Activate a subscription by machine, information is located in
+            the consumer facts
+
 VARIABLES

     h = NullHandler()

commit 769690b0adc8dd5ca110876d005c855a24a8df81
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:15 2012 -0500

    python-rhsm-0.94.15-1

diff --git a/rhsm.connection b/rhsm.connection
index bef04e8..2520335 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -124,6 +124,26 @@ CLASSES
             exceptions.BaseException.__str__(x)
             exceptions.BaseException.__unicode__(...)

+    class RemoteServerException(ConnectionException)
+
+
+        __init__(self, code)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
     class RhsmProxyHTTPSConnection(M2Crypto.httpslib.ProxyHTTPSConnection)



commit ba307d1709e2d8f5a7b1f3bf5a688d1f9a7a8cf6
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:44:02 2012 -0500

    python-rhsm-0.94.11-1

diff --git a/rhsm.connection b/rhsm.connection
index 54b9e52..bef04e8 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -4,6 +4,32 @@ MODULE NAME

 CLASSES

+    class NullHandler(logging.Handler)
+
+
+        emit(self, record)
+            Do whatever it takes to actually log the specified logging
+            record.
+
+            This version is intended to be implemented by subclasses and so
+            raises a NotImplementedError.
+
+        Inherited methods
+            logging.Handler.__init__(self, level=NOTSET)
+            logging.Handler.acquire(self)
+            logging.Filterer.addFilter(self, filter)
+            logging.Handler.close(self)
+            logging.Handler.createLock(self)
+            logging.Filterer.filter(self, record)
+            logging.Handler.flush(self)
+            logging.Handler.format(self, record)
+            logging.Handler.handle(self, record)
+            logging.Handler.handleError(self, record)
+            logging.Handler.release(self)
+            logging.Filterer.removeFilter(self, filter)
+            logging.Handler.setFormatter(self, fmt)
+            logging.Handler.setLevel(self, level)
+
     class ConnectionException(exceptions.Exception)

         Inherited methods
@@ -78,6 +104,26 @@ CLASSES
             exceptions.BaseException.__setstate__(...)
             exceptions.BaseException.__unicode__(...)

+    class NetworkException(ConnectionException)
+
+
+        __init__(self, code)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
     class RhsmProxyHTTPSConnection(M2Crypto.httpslib.ProxyHTTPSConnection)


@@ -231,6 +277,8 @@ CLASSES

 VARIABLES

+    h = NullHandler()
+
     log = logging.getLogger(__name__)

     config = initConfig()

commit 2d8d02dd7a44eaa1cb8ef15288de18f5ca42e421
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:43:59 2012 -0500

    python-rhsm-0.94.10-1

diff --git a/rhsm.certificate b/rhsm.certificate
new file mode 100644
index 0000000..8fb8efe
--- /dev/null
+++ b/rhsm.certificate
@@ -0,0 +1,688 @@
+MODULE NAME
+    rhsm.certificate
+
+DESCRIPTION
+    Contains classes for working with x.509 certificates. The backing
+    implementation is M2Crypto.X509 which has insufficient support for
+    custom v3 extensions.  It is not intended to be a replacement of full
+    wrapper but instead an extension.
+
+
+CLASSES
+
+    class Certificate(object)
+        Represents and x.509 certificate.
+
+
+        __init__(self, content=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        _update(self, content)
+
+        _parse_subject(self)
+
+        serialNumber(self)
+            Get the serial number
+            Returns:
+                The x.509 serial number
+            Return type:
+                str
+
+        subject(self)
+            Get the certificate subject. note: Missing NID mapping for UID
+            added to patch openssl.
+            Returns:
+                A dictionary of subject fields.
+            Return type:
+                dict
+
+        alternateName(self)
+            Return the altername name of the certificate.
+            Returns:
+                A string representation of hte alternate name
+            Return type:
+                str
+
+        validRange(self)
+            Get the valid date range.
+            Returns:
+                The valid date range.
+            Return type:
+                DateRange
+
+        valid(self, on_date=None)
+            Get whether the certificate is valid based on date.
+            Returns:
+                True if valid.
+            Return type:
+                boolean
+
+        bogus(self)
+            Get whether the certificate contains bogus data or is otherwise
+            unsuitable.  The certificate may be valid but still be
+            considered bogus.
+            Returns:
+                List of reasons if bogus
+            Return type:
+                list
+
+        extensions(self)
+            Get custom extensions.
+            Returns:
+                An extensions object.
+            Return type:
+                Extensions
+
+        read(self, path)
+            Read a certificate file.
+            Returns:
+                A certificate
+            Return type:
+                Certificate
+
+        write(self, path)
+            Write the certificate.
+            Returns:
+                self
+
+        delete(self)
+            Delete the file associated with this certificate.
+
+        toPEM(self)
+            Get PEM representation of the certificate.
+            Returns:
+                A PEM string
+            Return type:
+                str
+
+        __str__(self)
+            str(x)
+
+        __repr__(self)
+            repr(x)
+
+        __cmp__(self, other)
+
+        Instance variables
+
+            __ext
+                A dictionary of extensions OID:value
+
+            x509
+                The M2Crypto.X509 backing object.
+
+        Inherited methods
+
+    class RedhatCertificate(Certificate)
+        Represents a Red Hat certificate.
+
+
+        _update(self, content)
+
+        redhat(self)
+            Get the extension subtree for the redhat namespace.
+            Returns:
+                The extensions with the RH namespace trimmed.
+            Return type:
+                Extension
+
+        bogus(self)
+            Get whether the certificate contains bogus data or is otherwise
+            unsuitable.  The certificate may be valid but still be
+            considered bogus.
+            Returns:
+                List of reasons if bogus
+            Return type:
+                list
+
+        Class variables
+
+            REDHAT = '1.3.6.1.4.1.2312.9'
+                The Red Hat base OID.
+
+        Inherited methods
+            rhsm.certificate.Certificate.__cmp__(self, other)
+            rhsm.certificate.Certificate.__init__(self, content=None)
+            rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate.__str__(self)
+            rhsm.certificate.Certificate._parse_subject(self)
+            rhsm.certificate.Certificate.alternateName(self)
+            rhsm.certificate.Certificate.delete(self)
+            rhsm.certificate.Certificate.extensions(self)
+            rhsm.certificate.Certificate.read(self, path)
+            rhsm.certificate.Certificate.serialNumber(self)
+            rhsm.certificate.Certificate.subject(self)
+            rhsm.certificate.Certificate.toPEM(self)
+            rhsm.certificate.Certificate.valid(self, on_date=None)
+            rhsm.certificate.Certificate.validRange(self)
+            rhsm.certificate.Certificate.write(self, path)
+
+        Inherited instance variables
+            rhsm.certificate.Certificate.x509
+
+    class ProductCertificate(RedhatCertificate)
+        Represents a Red Hat product/entitlement certificate. It is OID
+        schema aware and provides methods to get product information.
+
+
+        getProduct(self)
+            Get the product defined in the certificate.
+            Returns:
+                A product object.
+            Return type:
+                Product
+
+        getProducts(self)
+            Get a list products defined in the certificate.
+            Returns:
+                A list of product objects.
+            Return type:
+                [Product,..]
+
+        bogus(self)
+            Get whether the certificate contains bogus data or is otherwise
+            unsuitable.  The certificate may be valid but still be
+            considered bogus.
+            Returns:
+                List of reasons if bogus
+            Return type:
+                list
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+            rhsm.certificate.Certificate.__cmp__(self, other)
+            rhsm.certificate.Certificate.__init__(self, content=None)
+            rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate._parse_subject(self)
+            rhsm.certificate.RedhatCertificate._update(self, content)
+            rhsm.certificate.Certificate.alternateName(self)
+            rhsm.certificate.Certificate.delete(self)
+            rhsm.certificate.Certificate.extensions(self)
+            rhsm.certificate.Certificate.read(self, path)
+            rhsm.certificate.RedhatCertificate.redhat(self)
+            rhsm.certificate.Certificate.serialNumber(self)
+            rhsm.certificate.Certificate.subject(self)
+            rhsm.certificate.Certificate.toPEM(self)
+            rhsm.certificate.Certificate.valid(self, on_date=None)
+            rhsm.certificate.Certificate.validRange(self)
+            rhsm.certificate.Certificate.write(self, path)
+
+        Inherited instance variables
+            rhsm.certificate.Certificate.x509
+
+        Inherited class variables
+            rhsm.certificate.RedhatCertificate.REDHAT = '1.3.6.1.4.1.2312.9'
+
+    class EntitlementCertificate(ProductCertificate)
+        Represents an entitlement certificate.
+
+
+        _update(self, content)
+
+        getOrder(self)
+            Get the order object defined in the certificate.
+            Returns:
+                An order object.
+            Return type:
+                Order
+
+        getEntitlements(self)
+            Get the all entitlements defined in the certificate.
+            Returns:
+                A list of entitlement object.
+            Return type:
+                [Entitlement,..]
+
+        getContentEntitlements(self)
+            Get the content entitlements defined in the certificate.
+            Returns:
+                A list of entitlement object.
+            Return type:
+                [Content,..]
+
+        getRoleEntitlements(self)
+            Get the role entitlements defined in the certificate.
+            Returns:
+                A list of entitlement object.
+            Return type:
+                [Role,..]
+
+        validRange(self)
+            Get the valid date range.
+
+            Overrides the Certificate method to look at the Order end date,
+            ignoring the grace period (if there is one).
+            Returns:
+                The valid date range.
+            Return type:
+                DateRange
+
+        validRangeWithGracePeriod(self)
+
+        validWithGracePeriod(self)
+
+        bogus(self)
+            Get whether the certificate contains bogus data or is otherwise
+            unsuitable.  The certificate may be valid but still be
+            considered bogus.
+            Returns:
+                List of reasons if bogus
+            Return type:
+                list
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+            rhsm.certificate.Certificate.__cmp__(self, other)
+            rhsm.certificate.Certificate.__init__(self, content=None)
+            rhsm.certificate.Certificate.__repr__(self)
+            rhsm.certificate.Certificate._parse_subject(self)
+            rhsm.certificate.Certificate.alternateName(self)
+            rhsm.certificate.Certificate.delete(self)
+            rhsm.certificate.Certificate.extensions(self)
+            rhsm.certificate.ProductCertificate.getProduct(self)
+            rhsm.certificate.ProductCertificate.getProducts(self)
+            rhsm.certificate.Certificate.read(self, path)
+            rhsm.certificate.RedhatCertificate.redhat(self)
+            rhsm.certificate.Certificate.serialNumber(self)
+            rhsm.certificate.Certificate.subject(self)
+            rhsm.certificate.Certificate.toPEM(self)
+            rhsm.certificate.Certificate.valid(self, on_date=None)
+            rhsm.certificate.Certificate.write(self, path)
+
+        Inherited instance variables
+            rhsm.certificate.Certificate.x509
+
+        Inherited class variables
+            rhsm.certificate.RedhatCertificate.REDHAT = '1.3.6.1.4.1.2312.9'
+
+    class Key(object)
+        The (private|public) key.
+
+
+        __init__(self, content)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        write(self, path)
+            Write the key.
+            Returns:
+                self
+
+        delete(self)
+            Delete the file associated with this key.
+
+        __str__(self)
+            str(x)
+
+        Class methods
+
+            read(cls, path)
+                Read the key.
+
+        Instance variables
+
+            content
+                The PEM encoded key.
+
+        Inherited methods
+
+    class DateRange
+        Date range object.
+
+
+        __init__(self, begin_date, end_date)
+
+        _convert_to_utc(self, timestamp)
+
+        begin(self)
+            Get range beginning.
+            Returns:
+                The beginning date in UTC.
+            Return type:
+                datetime.datetime
+
+        end(self)
+            Get range end.
+            Returns:
+                The end date in UTC.
+            Return type:
+                datetime.datetime
+
+        hasNow(self)
+            Get whether the certificate is valid based on the date now.
+            Returns:
+                True if valid.
+            Return type:
+                boolean
+
+        hasDate(self, date)
+            Get whether the certificate is valid based on the date now.
+            Returns:
+                True if valid.
+            Return type:
+                boolean
+
+        __str__(self)
+
+        Instance variables
+
+            begin_date
+                The begining date
+
+            end_date
+                The ending date
+
+    class GMT(datetime.tzinfo)
+        GMT
+
+
+        utcoffset(self, dt)
+
+        tzname(self, dt)
+
+        dst(self, dt)
+
+    class Extensions(dict)
+        Represents x.509 (v3) custom extensions.
+
+
+        __init__(self, x509)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+            Return type:
+                new empty dictionary
+
+        ltrim(self, n)
+            Left trim n parts.
+            Returns:
+                The trimmed OID
+            Return type:
+                Extensions
+
+        get(self, oid, default=None)
+            Get the value of an extension by oid. Note: The oid may contain
+            (*) wildcards.
+            Returns:
+                The value of the first extension matched.
+            Return type:
+                str
+
+        find(self, oid, limit=0)
+            Find all extensions matching the oid. Note: The oid may contain
+            (*) wildcards.
+            Returns:
+                A list of matching items.
+            Return type:
+                (OID, value)
+
+        branch(self, root)
+            Find a subtree by matching the oid.
+            Returns:
+                A subtree.
+            Return type:
+                Extensions
+
+        __ext(self, x509)
+
+        __parse(self, x509)
+
+        __str__(self)
+            str(x)
+
+        Class variables
+
+            pattern = re.compile('([0-9]+\.)+[0-9]+:')
+
+        Inherited methods
+            dict.__cmp__(x, y)
+            dict.__contains__(D, k)
+            dict.__delitem__(x, y)
+            dict.__eq__(x, y)
+            dict.__ge__(x, y)
+            dict.__getattribute__(...)
+            dict.__getitem__(x, y)
+            dict.__gt__(x, y)
+            dict.__iter__(x)
+            dict.__le__(x, y)
+            dict.__len__(x)
+            dict.__lt__(x, y)
+            dict.__ne__(x, y)
+            dict.__new__(T, S, *...)
+            dict.__repr__(x)
+            dict.__setitem__(x, i, y)
+            dict.__sizeof__(D)
+            dict.clear(D)
+            dict.copy(D)
+            dict.fromkeys(dict, S, v=...)
+            dict.has_key(D, k)
+            dict.items(D)
+            dict.iteritems(D)
+            dict.iterkeys(D)
+            dict.itervalues(D)
+            dict.keys(D)
+            dict.pop(D, k, d=...)
+            dict.popitem(D)
+            dict.setdefault(D, k, d=...)
+            dict.update(D, E, **F)
+            dict.values(D)
+
+        Inherited class variables
+            dict.__hash__ = None
+
+    class OID(object)
+        The Object Identifier object.
+
+
+        __init__(self, oid)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        parent(self)
+            Get the parent OID.
+            Returns:
+                The parent OID.
+            Return type:
+                OID
+
+        ltrim(self, n)
+            Left trim n parts.
+            Returns:
+                The trimmed OID
+            Return type:
+                OID
+
+        rtrim(self, n)
+            Right trim n parts.
+            Returns:
+                The trimmed OID
+            Return type:
+                OID
+
+        append(self, oid)
+            Append the specified OID fragment.
+            Returns:
+                The concatenated OID.
+            Return type:
+                OID
+
+        match(self, oid)
+            Match the specified OID considering wildcards. Patterns:
+
+              - 1.4.5.6.74 (not wildcarded)
+              - .5.6.74 (match on only last 4)
+              - 5.6.74. (match only first 4)
+              - 1.4.*.6.*  (wildcard pattern)
+            Returns:
+                True if matched
+
+        __len__(self)
+
+        __getitem__(self, index)
+
+        __repr__(self)
+            repr(x)
+
+        __hash__(self)
+            hash(x)
+
+        __eq__(self, other)
+
+        __str__(self)
+            str(x)
+
+        Class methods
+
+            join(cls, *oid)
+
+            split(cls, s)
+                Split an OID string.
+                Returns:
+                    A list of OID parts.
+                Return type:
+                    [str,]
+
+        Instance variables
+
+            part
+                The oid parts.
+
+        Class variables
+
+            WILDCARD = '*'
+                The wildcard character.
+
+        Inherited methods
+
+    class Order
+
+
+        __init__(self, ext)
+
+        getName(self)
+
+        getNumber(self)
+
+        getSku(self)
+
+        getSubscription(self)
+
+        getQuantity(self)
+
+        getStart(self)
+
+        getEnd(self)
+
+        getVirtLimit(self)
+
+        getSocketLimit(self)
+
+        getContract(self)
+
+        getQuantityUsed(self)
+
+        getWarningPeriod(self)
+
+        getAccountNumber(self)
+
+        __str__(self)
+
+    class Product
+
+
+        __init__(self, hash, ext)
+
+        getHash(self)
+
+        getName(self)
+
+        getVariant(self)
+
+        getArch(self)
+
+        getVersion(self)
+
+        __eq__(self, rhs)
+
+        __str__(self)
+
+        __repr__(self)
+
+    class Entitlement
+
+
+        __init__(self, ext)
+
+    class Content(Entitlement)
+
+
+        getName(self)
+
+        getLabel(self)
+
+        getQuantity(self)
+
+        getFlexQuantity(self)
+
+        getVendor(self)
+
+        getUrl(self)
+
+        getGpg(self)
+
+        getEnabled(self)
+
+        __eq__(self, rhs)
+
+        __str__(self)
+
+        __repr__(self)
+
+        Inherited methods
+            rhsm.certificate.Entitlement.__init__(self, ext)
+
+    class Role(Entitlement)
+
+
+        getName(self)
+
+        getDescription(self)
+
+        __eq__(self, rhs)
+
+        __str__(self)
+
+        __repr__(self)
+
+        Inherited methods
+            rhsm.certificate.Entitlement.__init__(self, ext)
+
+    class Bundle(object)
+
+
+        __init__(self, key=None, cert=None)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        read(self, path)
+
+        write(self, path)
+
+        __str__(self)
+            str(x)
+
+        Class variables
+
+            KEY_PATTERN = re.compile('-----BEGIN.+KEY-----\n.+\n-----END...
+
+            CERT_PATTERN = re.compile('-----BEGIN CERTIFICATE-----\n.+\n...
+
+        Inherited methods
+
+VARIABLES
+
+    log = logging.getLogger(__name__)

commit 619002cf01491dab788601df2341c95951ad3572
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:43:43 2012 -0500

    python-rhsm-0.94.3-1

diff --git a/rhsm.connection b/rhsm.connection
index a6fcac8..54b9e52 100644
--- a/rhsm.connection
+++ b/rhsm.connection
@@ -231,6 +231,6 @@ CLASSES

 VARIABLES

-    log = getLogger(__name__)
+    log = logging.getLogger(__name__)

     config = initConfig()

commit efdb20d1e93cb3c7dacb66940e3a25a79f7b8f67
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:43:41 2012 -0500

    python-rhsm-0.94.2-1

diff --git a/rhsm b/rhsm
new file mode 100644
index 0000000..445fd52
--- /dev/null
+++ b/rhsm
@@ -0,0 +1,2 @@
+MODULE NAME
+    rhsm
diff --git a/rhsm.config b/rhsm.config
new file mode 100644
index 0000000..4327470
--- /dev/null
+++ b/rhsm.config
@@ -0,0 +1,28 @@
+MODULE NAME
+    rhsm.config
+
+
+CLASSES
+
+    class RhsmConfigParser(iniparse.SafeConfigParser)
+
+
+        __init__(self, config_file=None, defaults=None)
+
+        save(self, config_file=None)
+
+        get(self, section, prop)
+
+FUNCTIONS
+
+    initConfig(config_file=None)
+
+VARIABLES
+
+    DEFAULT_CONFIG_DIR = "/etc/rhsm"
+
+    DEFAULT_CONFIG_PATH = "%s/rhsm.conf" % DEFAULT_CONFIG_DIR
+
+    DEFAULT_PROXY_PORT = "3128"
+
+    DEFAULTS = {'hostname': 'localhost', 'prefix': '/candlepin', 'port':...
diff --git a/rhsm.connection b/rhsm.connection
new file mode 100644
index 0000000..a6fcac8
--- /dev/null
+++ b/rhsm.connection
@@ -0,0 +1,236 @@
+MODULE NAME
+    rhsm.connection
+
+
+CLASSES
+
+    class ConnectionException(exceptions.Exception)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class ConnectionSetupException(ConnectionException)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class BadCertificateException(ConnectionException)
+        Thrown when an error parsing a certificate is encountered.
+
+
+        __init__(self, cert_path)
+            Pass the full path to the bad certificate.
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class RestlibException(ConnectionException)
+
+
+        __init__(self, code, msg="")
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__unicode__(...)
+
+    class RhsmProxyHTTPSConnection(M2Crypto.httpslib.ProxyHTTPSConnection)
+
+
+        endheaders(self, body=None)
+            Indicate that the last header line has been sent to the server.
+
+        Inherited methods
+            M2Crypto.httpslib.ProxyHTTPSConnection.__init__(self, host, port=None, strict=None, username=None,
+                 password=None, **ssl)
+            M2Crypto.httpslib.ProxyHTTPSConnection._encode_auth(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection._get_connect_msg(self)
+            httplib.HTTPConnection._output(self, s)
+            httplib.HTTPConnection._send_output(self)
+            httplib.HTTPConnection._send_request(self, method, url, body, headers)
+            httplib.HTTPConnection._set_hostport(self, host, port)
+            httplib.HTTPConnection._set_tunnel(self, host, port=None, headers=None)
+            M2Crypto.httpslib.ProxyHTTPSConnection._start_ssl(self)
+            httplib.HTTPConnection._tunnel(self)
+            M2Crypto.httpslib.HTTPSConnection.close(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection.connect(self)
+            M2Crypto.httpslib.HTTPSConnection.get_session(self)
+            httplib.HTTPConnection.getresponse(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection.putheader(self, header, value)
+            M2Crypto.httpslib.ProxyHTTPSConnection.putrequest(self, method, url, skip_host=0, skip_accept_encoding=0)
+            httplib.HTTPConnection.request(self, method, url, body=None, headers={})
+            httplib.HTTPConnection.send(self, str)
+            httplib.HTTPConnection.set_debuglevel(self, level)
+            M2Crypto.httpslib.HTTPSConnection.set_session(self, session)
+
+        Inherited class variables
+            M2Crypto.httpslib.ProxyHTTPSConnection._AUTH_HEADER = "Proxy-Authorization"
+            M2Crypto.httpslib.ProxyHTTPSConnection._UA_HEADER = "User-Agent"
+            httplib.HTTPConnection._http_vsn = 11
+            httplib.HTTPConnection._http_vsn_str = 'HTTP/1.1'
+            M2Crypto.httpslib.ProxyHTTPSConnection._ports = {'http': 80, 'https': 443}
+            httplib.HTTPConnection.auto_open = 1
+            httplib.HTTPConnection.debuglevel = 0
+            M2Crypto.httpslib.HTTPSConnection.default_port = HTTPS_PORT
+            httplib.HTTPConnection.strict = 0
+
+        Inherited nested classes
+            class httplib.HTTPConnection.response_class
+
+    class Restlib(object)
+        A wrapper around httplib to make rest calls easier
+
+
+        __init__(self, host, ssl_port, apihandler, username=None,
+                 password=None, proxy_hostname=None, proxy_port=None,
+                 proxy_user=None, proxy_password=None, cert_file=None,
+                 key_file=None, ca_dir=None, insecure=False,
+                 ssl_verify_depth=1)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        _load_ca_certificates(self, context)
+
+        _request(self, request_type, method, info=None)
+
+        validateResponse(self, response)
+
+        request_get(self, method)
+
+        request_post(self, method, params="")
+
+        request_head(self, method)
+
+        request_put(self, method, params="")
+
+        request_delete(self, method)
+
+        Inherited methods
+
+    class UEPConnection
+        Class for communicating with the REST interface of a Red Hat
+        Unified Entitlement Platform.
+
+
+        __init__(self, host=config.get('server','hostname'),
+                 ssl_port=int(config.get('server','port')),
+                 handler=config.get('server','prefix'),
+                 proxy_hostname=config.get('server','proxy_hostname'),
+                 proxy_port=config.get('server','proxy_port'),
+                 proxy_user=config.get('server','proxy_user'),
+                 proxy_password=config.get('server','proxy_password'),
+                 username=None, password=None, cert_file=None,
+                 key_file=None, insecure=None)
+            Two ways to authenticate:
+
+              - username/password for HTTP basic authentication. (owner
+                admin role)
+              - uuid/key_file/cert_file for identity cert authentication.
+                (consumer role)
+
+            Must specify one method of authentication or the other, not
+            both.
+
+        add_ssl_certs(self, cert_file=None, key_file=None)
+
+        shutDown(self)
+
+        ping(self, username=None, password=None)
+
+        registerConsumer(self, name="unknown", type="system", facts={})
+            Creates a consumer on candlepin server
+
+        updateConsumerFacts(self, consumer_uuid, facts={})
+            Update a consumers facts on candlepin server
+
+        getConsumer(self, uuid, username, password)
+            Returns a consumer object with pem/key for existing consumers
+
+        unregisterConsumer(self, consumerId)
+            Deletes a consumer from candlepin server
+
+        getCertificates(self, consumer_uuid, serials=[])
+            Fetch all entitlement certificates for this consumer. Specify a
+            list of serial numbers to filter if desired.
+
+        getCertificateSerials(self, consumerId)
+            Get serial numbers for certs for a given consumer
+
+        bindByRegNumber(self, consumerId, regnum, email=None, lang=None)
+            Subscribe consumer to a subscription token
+
+        bindByEntitlementPool(self, consumerId, poolId, quantity=None)
+            Subscribe consumer to a subscription by pool ID.
+
+        bindByProduct(self, consumerId, products)
+            Subscribe consumer directly to one or more products by their
+            ID. This will cause the UEP to look for one or more pools which
+            provide access to the given product.
+
+        unbindBySerial(self, consumerId, serial)
+
+        unbindByEntitlementId(self, consumerId, entId)
+
+        unbindAll(self, consumerId)
+
+        getPoolsList(self, consumerId, listAll=False, active_on=None)
+
+        getPool(self, poolId)
+
+        getProduct(self, product_id)
+
+        getEntitlementList(self, consumerId)
+
+        getEntitlement(self, entId)
+
+        regenIdCertificate(self, consumerId)
+
+VARIABLES
+
+    log = getLogger(__name__)
+
+    config = initConfig()
diff --git a/rhsm.logutil b/rhsm.logutil
new file mode 100644
index 0000000..a00a868
--- /dev/null
+++ b/rhsm.logutil
@@ -0,0 +1,11 @@
+MODULE NAME
+    rhsm.logutil
+
+
+FUNCTIONS
+
+    trace_me()
+
+    trace_me_more()
+
+    getLogger(name)

commit a3de8142383633d9f9247555639d5725a2f6afdd
Author: Adrian Likins <alikins@redhat.com>
Date:   Fri Nov 30 13:43:38 2012 -0500

    python-rhsm-0.94.1-1

diff --git a/config b/config
new file mode 100644
index 0000000..63282d6
--- /dev/null
+++ b/config
@@ -0,0 +1,58 @@
+MODULE NAME
+    config
+
+
+CLASSES
+
+    class RhsmConfigParser(ConfigParser.SafeConfigParser)
+
+
+        __init__(self, config_file=None, defaults=None)
+
+        save(self, config_file=None)
+
+        Inherited methods
+            ConfigParser.RawConfigParser._get(self, section, conv, option)
+            ConfigParser.SafeConfigParser._interpolate(self, section, option, rawval, vars)
+            ConfigParser.SafeConfigParser._interpolate_some(self, option, accum, rest, section, map, depth)
+            ConfigParser.ConfigParser._interpolation_replace(self, match)
+            ConfigParser.RawConfigParser._read(self, fp, fpname)
+            ConfigParser.RawConfigParser.add_section(self, section)
+            ConfigParser.RawConfigParser.defaults(self)
+            ConfigParser.ConfigParser.get(self, section, option, raw=False, vars=None)
+            ConfigParser.RawConfigParser.getboolean(self, section, option)
+            ConfigParser.RawConfigParser.getfloat(self, section, option)
+            ConfigParser.RawConfigParser.getint(self, section, option)
+            ConfigParser.RawConfigParser.has_option(self, section, option)
+            ConfigParser.RawConfigParser.has_section(self, section)
+            ConfigParser.ConfigParser.items(self, section, raw=False, vars=None)
+            ConfigParser.RawConfigParser.options(self, section)
+            ConfigParser.RawConfigParser.optionxform(self, optionstr)
+            ConfigParser.RawConfigParser.read(self, filenames)
+            ConfigParser.RawConfigParser.readfp(self, fp, filename=None)
+            ConfigParser.RawConfigParser.remove_option(self, section, option)
+            ConfigParser.RawConfigParser.remove_section(self, section)
+            ConfigParser.RawConfigParser.sections(self)
+            ConfigParser.SafeConfigParser.set(self, section, option, value)
+            ConfigParser.RawConfigParser.write(self, fp)
+
+        Inherited class variables
+            ConfigParser.RawConfigParser.OPTCRE = re.compile(r'(?P<option>[^:=\s][^:=]*)' r'\s*(?P<vi>[:...
+            ConfigParser.RawConfigParser.SECTCRE = re.compile(r'\[' r'(?P<header>[^]]+)' r'\]')
+            ConfigParser.ConfigParser._KEYCRE = re.compile(r"%\(([^)]*)\)s|.")
+            ConfigParser.RawConfigParser._boolean_states = {'1': True, 'yes': True, 'true': True, 'on': True, '0'...
+            ConfigParser.SafeConfigParser._interpvar_re = re.compile(r"%\(([^)]+)\)s")
+
+FUNCTIONS
+
+    initConfig(config_file=None)
+
+VARIABLES
+
+    DEFAULT_CONFIG_DIR = "/etc/rhsm"
+
+    DEFAULT_CONFIG_PATH = "%s/rhsm.conf" % DEFAULT_CONFIG_DIR
+
+    DEFAULT_PROXY_PORT = "3128"
+
+    DEFAULTS = {'hostname': 'localhost', 'prefix': '/candlepin', 'port':...
diff --git a/connection b/connection
new file mode 100644
index 0000000..378db86
--- /dev/null
+++ b/connection
@@ -0,0 +1,218 @@
+MODULE NAME
+    connection
+
+
+CLASSES
+
+    class ConnectionException(exceptions.Exception)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class ConnectionSetupException(ConnectionException)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__init__(...)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__str__(x)
+            exceptions.BaseException.__unicode__(...)
+
+    class RestlibException(ConnectionException)
+
+
+        __init__(self, code, msg="")
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        __str__(self)
+            str(x)
+
+        Inherited methods
+            exceptions.BaseException.__delattr__(...)
+            exceptions.BaseException.__getattribute__(...)
+            exceptions.BaseException.__getitem__(x, y)
+            exceptions.BaseException.__getslice__(x, i, j)
+            exceptions.Exception.__new__(T, S, *...)
+            exceptions.BaseException.__reduce__(...)
+            exceptions.BaseException.__repr__(x)
+            exceptions.BaseException.__setattr__(...)
+            exceptions.BaseException.__setstate__(...)
+            exceptions.BaseException.__unicode__(...)
+
+    class RhsmProxyHTTPSConnection(M2Crypto.httpslib.ProxyHTTPSConnection)
+
+
+        endheaders(self, body=None)
+            Indicate that the last header line has been sent to the server.
+
+        Inherited methods
+            M2Crypto.httpslib.ProxyHTTPSConnection.__init__(self, host, port=None, strict=None, username=None,
+                 password=None, **ssl)
+            M2Crypto.httpslib.ProxyHTTPSConnection._encode_auth(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection._get_connect_msg(self)
+            httplib.HTTPConnection._output(self, s)
+            httplib.HTTPConnection._send_output(self)
+            httplib.HTTPConnection._send_request(self, method, url, body, headers)
+            httplib.HTTPConnection._set_hostport(self, host, port)
+            httplib.HTTPConnection._set_tunnel(self, host, port=None, headers=None)
+            M2Crypto.httpslib.ProxyHTTPSConnection._start_ssl(self)
+            httplib.HTTPConnection._tunnel(self)
+            M2Crypto.httpslib.HTTPSConnection.close(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection.connect(self)
+            M2Crypto.httpslib.HTTPSConnection.get_session(self)
+            httplib.HTTPConnection.getresponse(self)
+            M2Crypto.httpslib.ProxyHTTPSConnection.putheader(self, header, value)
+            M2Crypto.httpslib.ProxyHTTPSConnection.putrequest(self, method, url, skip_host=0, skip_accept_encoding=0)
+            httplib.HTTPConnection.request(self, method, url, body=None, headers={})
+            httplib.HTTPConnection.send(self, str)
+            httplib.HTTPConnection.set_debuglevel(self, level)
+            M2Crypto.httpslib.HTTPSConnection.set_session(self, session)
+
+        Inherited class variables
+            M2Crypto.httpslib.ProxyHTTPSConnection._AUTH_HEADER = "Proxy-Authorization"
+            M2Crypto.httpslib.ProxyHTTPSConnection._UA_HEADER = "User-Agent"
+            httplib.HTTPConnection._http_vsn = 11
+            httplib.HTTPConnection._http_vsn_str = 'HTTP/1.1'
+            M2Crypto.httpslib.ProxyHTTPSConnection._ports = {'http': 80, 'https': 443}
+            httplib.HTTPConnection.auto_open = 1
+            httplib.HTTPConnection.debuglevel = 0
+            M2Crypto.httpslib.HTTPSConnection.default_port = HTTPS_PORT
+            httplib.HTTPConnection.strict = 0
+
+        Inherited nested classes
+            class httplib.HTTPConnection.response_class
+
+    class Restlib(object)
+        A wrapper around httplib to make rest calls easier
+
+
+        __init__(self, host, ssl_port, apihandler, username=None,
+                 password=None, proxy_hostname=None, proxy_port=None,
+                 proxy_user=None, proxy_password=None, cert_file=None,
+                 key_file=None, ca_dir=None, insecure=False,
+                 ssl_verify_depth=1)
+            x.__init__(...) initializes x; see x.__class__.__doc__ for
+            signature
+
+        _load_ca_certificates(self, context)
+
+        _request(self, request_type, method, info=None)
+
+        validateResponse(self, response)
+
+        request_get(self, method)
+
+        request_post(self, method, params="")
+
+        request_head(self, method)
+
+        request_put(self, method, params="")
+
+        request_delete(self, method)
+
+        Inherited methods
+
+    class UEPConnection
+        Class for communicating with the REST interface of a Red Hat
+        Unified Entitlement Platform.
+
+
+        __init__(self, host=config.get('server','hostname'),
+                 ssl_port=int(config.get('server','port')),
+                 handler=config.get('server','prefix'),
+                 proxy_hostname=config.get('server','proxy_hostname'),
+                 proxy_port=config.get('server','proxy_port'),
+                 proxy_user=config.get('server','proxy_user'),
+                 proxy_password=config.get('server','proxy_password'),
+                 username=None, password=None, cert_file=None,
+                 key_file=None)
+            Two ways to authenticate:
+
+              - username/password for HTTP basic authentication. (owner
+                admin role)
+              - uuid/key_file/cert_file for identity cert authentication.
+                (consumer role)
+
+            Must specify one method of authentication or the other, not
+            both.
+
+        add_ssl_certs(self, cert_file=None, key_file=None)
+
+        shutDown(self)
+
+        ping(self, username=None, password=None)
+
+        registerConsumer(self, name="unknown", type="system", facts={})
+            Creates a consumer on candlepin server
+
+        updateConsumerFacts(self, consumer_uuid, facts={})
+            Update a consumers facts on candlepin server
+
+        getConsumer(self, uuid, username, password)
+            Returns a consumer object with pem/key for existing consumers
+
+        unregisterConsumer(self, consumerId)
+            Deletes a consumer from candlepin server
+
+        getCertificates(self, consumer_uuid, serials=[])
+            Fetch all entitlement certificates for this consumer. Specify a
+            list of serial numbers to filter if desired.
+
+        getCertificateSerials(self, consumerId)
+            Get serial numbers for certs for a given consumer
+
+        bindByRegNumber(self, consumerId, regnum, email=None, lang=None)
+            Subscribe consumer to a subscription token
+
+        bindByEntitlementPool(self, consumerId, poolId, quantity=None)
+            Subscribe consumer to a subscription by pool ID.
+
+        bindByProduct(self, consumerId, products)
+            Subscribe consumer directly to one or more products by their
+            ID. This will cause the UEP to look for one or more pools which
+            provide access to the given product.
+
+        unbindBySerial(self, consumerId, serial)
+
+        unbindByEntitlementId(self, consumerId, entId)
+
+        unbindAll(self, consumerId)
+
+        getPoolsList(self, consumerId, listAll=False, active_on=None)
+
+        getPool(self, poolId)
+
+        getProduct(self, product_id)
+
+        getEntitlementList(self, consumerId)
+
+        getEntitlement(self, entId)
+
+        regenIdCertificate(self, consumerId)
+
+VARIABLES
+
+    log = getLogger(__name__)
+
+    _ = gettext.gettext
+
+    config = initConfig()
diff --git a/logutil b/logutil
new file mode 100644
index 0000000..a0a0ee8
--- /dev/null
+++ b/logutil
@@ -0,0 +1,17 @@
+MODULE NAME
+    logutil
+
+
+FUNCTIONS
+
+    trace_me()
+
+    trace_me_more()
+
+    getLogger(name)
+
+    getLastCertUpdate()
+
+VARIABLES
+
+    CERT_LOG = '/var/log/rhsm/rhsmcertd.log'
